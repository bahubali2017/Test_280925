üîí STRICT AGENT PROMPT ‚Äî FINAL DISCLAIMER PASS-THROUGH FIX

Mission:
Fix disclaimer pipeline so that disclaimers generated on the server are passed into the normalized metadata object and rendered in the UI. Eliminate duplication, overlap, and dead paths.

üìå Instructions for Agent

File Targets

server/routes.js (or equivalent SSE/REST streaming handler)

client/src/lib/router.js (normalizeRouterResult)

client/src/components/MessageBubble.jsx (UI render, unchanged except for validation)

Changes Required

A. Server (routes.js)

Ensure disclaimers generated by selectDisclaimers() are attached to the final SSE payload in the metadata field.

Example fix:

// When finishing SSE response:
sse.send({
  type: 'done',
  data: { messageId, responseMode, questionType },
  metadata: {
    disclaimers,   // ‚úÖ forward disclaimers here
    atd: atdNotices || [],
    triage: ctx.triage || null
  }
});

B. Router (router.js)

Ensure normalizeRouterResult() actually copies disclaimers from the server payload into the metadata object.

Example patch:

const normalized = normalizeRouterResult({
  userInput: ctx.userInput,
  enhancedPrompt,
  isHighRisk: !!ctx.triage?.isHighRisk,
  disclaimers: disclaimers || [],   // ‚úÖ forward from server, not regenerated
  atd: atdNotices && atdNotices.length ? atdNotices : null,
  metadata: { processingTime, stageTimings: t.toJSON(), disclaimers }
});

C. UI (MessageBubble.jsx)

Keep existing dedupeDisclaimers(metadata.queryIntent.disclaimers) rendering logic.

No injection from AI text. No second source.

‚úÖ Expected Final State

Server: generates disclaimers (3 for non-urgent medication).

Router: forwards them into normalized.metadata.

Client UI: receives disclaimers and renders them once only.

Deduplication: still active in case of edge cases.

No duplicates, no missing disclaimers.

‚ö†Ô∏è Important: Do not reintroduce the old systemPrompt disclaimer injection or fallback-engine duplication. Only allow disclaimers to flow from server ‚Üí metadata ‚Üí UI.