[{"filePath":"/home/runner/workspace/client/src/App.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/components/MessageBubble.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/components/ProtectedRoute.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/components/SocialLoginButton.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/components/ThemeToggle.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Moon' is defined but never used. Allowed unused vars must match /React|Switch|Route|Redirect|Router|QueryClientProvider|AuthProvider|ProtectedRoute|ChatPage|ChevronRight|MoreHorizontal|ChevronDown|ChevronUp|Search|CheckIcon|ChevronsUpDown|Circle|X|Plus|Minus|Slot|Check|Button|Input|MessageBubble|SocialLoginButton|FcGoogle|FaMicrosoft|FaApple|OTPInput|OTPInputContext|Dot|Dialog|DialogContent|Label|LabelPrimitive|Controller|DayPicker|ChevronLeft|ArrowLeft|ArrowRight|Link|GripVertical|PanelLeft|Separator|Sheet|SheetContent|SheetDescription|SheetHeader|SheetTitle|SheetTrigger|Toast|ToastClose|ToastDescription|ToastProvider|ToastTitle|ToastViewport|App|Skeleton|Tooltip|TooltipContent|TooltipProvider|TooltipTrigger|Comp/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"Moon"},"fix":{"range":[127,132],"text":""},"desc":"Remove unused variable 'Moon'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Sun' is defined but never used. Allowed unused vars must match /React|Switch|Route|Redirect|Router|QueryClientProvider|AuthProvider|ProtectedRoute|ChatPage|ChevronRight|MoreHorizontal|ChevronDown|ChevronUp|Search|CheckIcon|ChevronsUpDown|Circle|X|Plus|Minus|Slot|Check|Button|Input|MessageBubble|SocialLoginButton|FcGoogle|FaMicrosoft|FaApple|OTPInput|OTPInputContext|Dot|Dialog|DialogContent|Label|LabelPrimitive|Controller|DayPicker|ChevronLeft|ArrowLeft|ArrowRight|Link|GripVertical|PanelLeft|Separator|Sheet|SheetContent|SheetDescription|SheetHeader|SheetTitle|SheetTrigger|Toast|ToastClose|ToastDescription|ToastProvider|ToastTitle|ToastViewport|App|Skeleton|Tooltip|TooltipContent|TooltipProvider|TooltipTrigger|Comp/u.","line":3,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"Sun"},"fix":{"range":[131,136],"text":""},"desc":"Remove unused variable 'Sun'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\n// Moon and Sun icons are used in the conditional rendering below\nimport { Moon, Sun } from 'lucide-react';\n\n/**\n * Theme toggle component that switches between light and dark mode\n * Uses Moon and Sun icons from lucide-react for the toggle button\n * @returns {JSX.Element} The theme toggle component\n */\nexport function ThemeToggle() {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n\n  // Initialize theme based on system preference or stored setting\n  useEffect(() => {\n    // Check if user has a preference stored\n    const storedTheme = localStorage.getItem('theme');\n    \n    if (storedTheme === 'dark' || \n      (!storedTheme && window.matchMedia('(prefers-color-scheme: dark)').matches)) {\n      setIsDarkMode(true);\n      document.documentElement.classList.add('dark');\n    } else {\n      setIsDarkMode(false);\n      document.documentElement.classList.remove('dark');\n    }\n  }, []);\n\n  /**\n   * Toggles between light and dark mode\n   */\n  const toggleTheme = () => {\n    if (isDarkMode) {\n      // Switch to light mode\n      document.documentElement.classList.remove('dark');\n      localStorage.setItem('theme', 'light');\n      setIsDarkMode(false);\n    } else {\n      // Switch to dark mode\n      document.documentElement.classList.add('dark');\n      localStorage.setItem('theme', 'dark');\n      setIsDarkMode(true);\n    }\n  };\n\n  return (\n    <button\n      onClick={toggleTheme}\n      className=\"p-2 rounded-full text-sm font-medium text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary transition-colors duration-200\"\n      aria-label={isDarkMode ? \"Switch to light mode\" : \"Switch to dark mode\"}\n    >\n      {isDarkMode ? (\n        <Sun size={20} className=\"text-amber-500\" aria-hidden=\"true\" />\n      ) : (\n        <Moon size={20} className=\"text-primary-900\" aria-hidden=\"true\" />\n      )}\n      <span className=\"sr-only\">{isDarkMode ? \"Light Mode\" : \"Dark Mode\"}</span>\n    </button>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/components/Toast.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/components/ToastProvider.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/components/ui/accordion.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/components/ui/alert-dialog.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/components/ui/alert.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/components/ui/aspect-ratio.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/components/ui/avatar.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/components/ui/badge.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/components/ui/breadcrumb.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/components/ui/button.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/components/ui/calendar.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/components/ui/card.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/components/ui/carousel.jsx","messages":[{"ruleId":"jsdoc/require-returns","severity":1,"message":"Missing JSDoc @returns declaration.","line":54,"column":3,"nodeType":"Block","endLine":57,"endColumn":6},{"ruleId":"jsdoc/require-returns","severity":1,"message":"Missing JSDoc @returns declaration.","line":184,"column":3,"nodeType":"Block","endLine":187,"endColumn":6},{"ruleId":"jsdoc/require-returns","severity":1,"message":"Missing JSDoc @returns declaration.","line":225,"column":3,"nodeType":"Block","endLine":228,"endColumn":6}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport useEmblaCarousel from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\nimport { Button } from \"./button\"\n\n/**\n * @typedef {object} CarouselProps\n * @property {Record<string, any>} [opts] - Carousel options for embla carousel\n * @property {any[]} [plugins] - Carousel plugins for embla carousel\n * @property {\"horizontal\"|\"vertical\"} [orientation=\"horizontal\"] - Carousel orientation\n * @property {Function} [setApi] - Function to set carousel API externally\n * @property {string} [className] - Additional class names\n * @property {React.ReactNode} children - Child components\n */\n\n/**\n * @typedef {object} CarouselContextProps\n * @property {React.RefObject<HTMLDivElement>} carouselRef - Reference to carousel element\n * @property {any} api - Embla carousel API\n * @property {Function} scrollPrev - Function to scroll to previous slide\n * @property {Function} scrollNext - Function to scroll to next slide\n * @property {boolean} canScrollPrev - Whether carousel can scroll to previous slide\n * @property {boolean} canScrollNext - Whether carousel can scroll to next slide\n * @property {object} [opts] - Carousel options\n * @property {\"horizontal\"|\"vertical\"} [orientation] - Carousel orientation\n */\n\n/** @type {React.Context<CarouselContextProps|null>} */\nconst CarouselContext = React.createContext(/** @type {CarouselContextProps|null} */ (null))\n\n/**\n * Hook to access carousel context\n * @returns {CarouselContextProps} Carousel context\n */\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\n/**\n * Carousel component\n * @param {CarouselProps} props - Component props\n * @param {React.ForwardedRef<HTMLDivElement>} ref - Forwarded ref\n * @returns {JSX.Element} Carousel component\n */\nconst Carousel = React.forwardRef(\n  /** \n   * @param {CarouselProps} props - Component props \n   * @param {React.ForwardedRef<HTMLDivElement>} ref - Forwarded ref\n   */\n  (props, ref) => {\n    /** @type {CarouselProps} */\n    const propsCast = props;\n    const {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...otherProps\n    } = propsCast;\n\n    /** @type {[any, any]} */\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((/** @type {any} */ api) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (/** @type {React.KeyboardEvent} */ event) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    // Create a properly typed value object for the context\n    /** @type {{\n      carouselRef: any,\n      api: any,\n      opts: any,\n      orientation: \"horizontal\" | \"vertical\",\n      scrollPrev: () => void,\n      scrollNext: () => void,\n      canScrollPrev: boolean,\n      canScrollNext: boolean\n    }} */\n    const contextValue = {\n      carouselRef,\n      api: api,\n      opts,\n      orientation:\n        orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n      scrollPrev,\n      scrollNext,\n      canScrollPrev,\n      canScrollNext,\n    };\n\n    return (\n      <CarouselContext.Provider value={contextValue}>\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...otherProps}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\n/**\n * Carousel content component\n * @param {object} props - Component props\n * @param {string} [props.className] - Additional class names\n * @param {React.ReactNode} props.children - Child elements\n * @param {React.ForwardedRef<HTMLDivElement>} ref - Forwarded ref\n * @returns {JSX.Element} Carousel content component\n */\nconst CarouselContent = React.forwardRef(\n  /** \n   * @param {{className?: string, children: React.ReactNode}} props - Component props\n   * @param {React.ForwardedRef<HTMLDivElement>} ref - Forwarded ref\n   */\n  (props, ref) => {\n    /** @type {{className?: string, children: React.ReactNode}} */\n    const typedProps = props;\n    const { className, children, ...otherProps } = typedProps;\n    const { carouselRef, orientation } = useCarousel()\n    \n    /** @type {import('react').RefObject<HTMLDivElement>} */\n    const typedCarouselRef = carouselRef;\n\n    return (\n      <div ref={typedCarouselRef} className=\"overflow-hidden\">\n        <div\n          ref={ref}\n          className={cn(\n            \"flex\",\n            orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n            className\n          )}\n          {...otherProps}\n        >\n          {children}\n        </div>\n      </div>\n    )\n  }\n)\nCarouselContent.displayName = \"CarouselContent\"\n\n/**\n * Carousel item component\n * @param {object} props - Component props\n * @param {string} [props.className] - Additional class names\n * @param {React.ReactNode} props.children - Child elements\n * @param {React.ForwardedRef<HTMLDivElement>} ref - Forwarded ref\n * @returns {JSX.Element} Carousel item component\n */\nconst CarouselItem = React.forwardRef(\n  /** \n   * @param {{className?: string, children: React.ReactNode}} props - Component props\n   * @param {React.ForwardedRef<HTMLDivElement>} ref - Forwarded ref\n   */\n  (props, ref) => {\n    /** @type {{className?: string, children: React.ReactNode}} */\n    const typedProps = props;\n    const { className, children, ...otherProps } = typedProps;\n    const { orientation } = useCarousel()\n\n    return (\n      <div\n        ref={ref}\n        role=\"group\"\n        aria-roledescription=\"slide\"\n        className={cn(\n          \"min-w-0 shrink-0 grow-0 basis-full\",\n          orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n          className\n        )}\n        {...otherProps}\n      >\n        {children}\n      </div>\n    )\n  }\n)\nCarouselItem.displayName = \"CarouselItem\"\n\n/**\n * Carousel previous button component\n * @param {object} props - Component props\n * @param {string} [props.className] - Additional class names\n * @param {string} [props.variant=\"outline\"] - Button variant\n * @param {string} [props.size=\"icon\"] - Button size\n * @param {React.ReactNode} [props.children] - Child elements\n * @param {React.ForwardedRef<HTMLButtonElement>} ref - Forwarded ref\n * @returns {JSX.Element} Carousel previous button component\n */\n/**\n * CarouselPrevious component\n * @returns {JSX.Element} Previous button for carousel navigation\n */\nconst CarouselPrevious = React.forwardRef(\n  /** \n   * @param {{className?: string, variant?: string, size?: string, children?: React.ReactNode}} props - Component props\n   * @param {React.ForwardedRef<HTMLButtonElement>} ref - Forwarded ref\n   * @returns {JSX.Element} Carousel previous button\n   */\n  (props, ref) => {\n    /** @type {{className?: string, variant?: string, size?: string, children?: React.ReactNode}} */\n    const typedProps = props;\n    const { className, variant = \"outline\", size = \"icon\", ...otherProps } = typedProps;\n    const { orientation, scrollPrev, canScrollPrev } = useCarousel();\n\n    // Build className directly (no intermediate unused variables)\n    const combinedClassName = cn(\n      \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n      variant === \"outline\" ? \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\" : \"\",\n      size === \"icon\" ? \"h-10 w-10\" : \"\",\n      \"absolute h-8 w-8 rounded-full\",\n      orientation === \"horizontal\"\n        ? \"-left-12 top-1/2 -translate-y-1/2\"\n        : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n      className\n    );\n    \n    // Create a properly typed onClick handler\n    /** @type {React.MouseEventHandler<HTMLButtonElement>} */\n    const handleClick = React.useCallback((event) => {\n      if (typeof scrollPrev === 'function') {\n        scrollPrev(event);\n      }\n    }, [scrollPrev]);\n    \n    return (\n      <button\n        ref={ref}\n        type=\"button\"\n        className={combinedClassName}\n        disabled={!canScrollPrev}\n        onClick={handleClick}\n        aria-label=\"Previous slide\"\n        {...otherProps}\n      >\n        <ArrowLeft className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Previous slide</span>\n      </button>\n    );\n  }\n)\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\n/**\n * Carousel next button component\n * @param {object} props - Component props\n * @param {string} [props.className] - Additional class names\n * @param {string} [props.variant=\"outline\"] - Button variant\n * @param {string} [props.size=\"icon\"] - Button size\n * @param {React.ReactNode} [props.children] - Child elements\n * @param {React.ForwardedRef<HTMLButtonElement>} ref - Forwarded ref\n * @returns {JSX.Element} Carousel next button component\n */\nconst CarouselNext = React.forwardRef(\n  /** \n   * @param {{className?: string, variant?: string, size?: string, children?: React.ReactNode}} props - Component props\n   * @param {React.ForwardedRef<HTMLButtonElement>} ref - Forwarded ref\n   * @returns {JSX.Element} Carousel next button\n   */\n  (props, ref) => {\n    /** @type {{className?: string, variant?: string, size?: string, children?: React.ReactNode}} */\n    const typedProps = props;\n    const { className, variant = \"outline\", size = \"icon\", ...otherProps } = typedProps;\n    const { orientation, scrollNext, canScrollNext } = useCarousel();\n\n    // Build className directly without intermediate unused variables\n    const combinedClassName = cn(\n      \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n      variant === \"outline\" ? \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\" : \"\",\n      size === \"icon\" ? \"h-10 w-10\" : \"\",\n      \"absolute h-8 w-8 rounded-full\",\n      orientation === \"horizontal\"\n        ? \"-right-12 top-1/2 -translate-y-1/2\"\n        : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n      className\n    );\n    \n    // Create a properly typed onClick handler\n    /** @type {React.MouseEventHandler<HTMLButtonElement>} */\n    const handleClick = React.useCallback((event) => {\n      if (typeof scrollNext === 'function') {\n        scrollNext(event);\n      }\n    }, [scrollNext]);\n    \n    return (\n      <button\n        ref={ref}\n        type=\"button\"\n        className={combinedClassName}\n        disabled={!canScrollNext}\n        onClick={handleClick}\n        aria-label=\"Next slide\"\n        {...otherProps}\n      >\n        <ArrowRight className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Next slide</span>\n      </button>\n    );\n  }\n)\nCarouselNext.displayName = \"CarouselNext\"\n\n/**\n * Export Carousel components\n * @module Carousel\n */\nexport {\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}","usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/components/ui/chart.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/components/ui/checkbox.jsx","messages":[{"ruleId":"jsdoc/require-returns","severity":1,"message":"Missing JSDoc @returns declaration.","line":18,"column":3,"nodeType":"Block","endLine":21,"endColumn":6}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\n\n/**\n * Checkbox component props\n * @typedef {object} CheckboxProps\n * @property {string} [className] - Additional class names\n */\n\n/**\n * Checkbox component for form inputs\n * @type {React.ForwardRefExoticComponent<React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root> & React.RefAttributes<React.ElementRef<typeof CheckboxPrimitive.Root>>>}\n */\nconst Checkbox = React.forwardRef(\n  /**\n   * @param {React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>} props\n   * @param {React.ForwardedRef<React.ElementRef<typeof CheckboxPrimitive.Root>>} ref\n   */\n  (props, ref) => {\n    // Create safe props object with type checking\n    const safeProps = props || {};\n    \n    // Extract className with type checking\n    let className;\n    if (\n      typeof safeProps === 'object' && \n      safeProps !== null && \n      Object.prototype.hasOwnProperty.call(safeProps, 'className') && \n      typeof safeProps['className'] === 'string'\n    ) {\n      className = safeProps['className'];\n    }\n    \n    // Create clean props object without extracted properties\n    const otherProps = {};\n    if (typeof safeProps === 'object' && safeProps !== null) {\n      Object.keys(safeProps).forEach(key => {\n        if (key !== 'className') {\n          otherProps[key] = safeProps[key];\n        }\n      });\n    }\n    \n    return (\n      <CheckboxPrimitive.Root\n        ref={ref}\n        className={cn(\n          \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n          className\n        )}\n        {...otherProps}\n      >\n        <CheckboxPrimitive.Indicator\n          className={cn(\"flex items-center justify-center text-current\")}\n        >\n          <Check className=\"h-4 w-4\" />\n        </CheckboxPrimitive.Indicator>\n      </CheckboxPrimitive.Root>\n    );\n  }\n)\n\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\n/**\n * Export Checkbox component\n * @module Checkbox\n */\nexport { Checkbox }","usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/components/ui/collapsible.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/components/ui/command.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'CommandWrapper' is assigned a value but never used. Allowed unused vars must match /React|Switch|Route|Redirect|Router|QueryClientProvider|AuthProvider|ProtectedRoute|ChatPage|ChevronRight|MoreHorizontal|ChevronDown|ChevronUp|Search|CheckIcon|ChevronsUpDown|Circle|X|Plus|Minus|Slot|Check|Button|Input|MessageBubble|SocialLoginButton|FcGoogle|FaMicrosoft|FaApple|OTPInput|OTPInputContext|Dot|Dialog|DialogContent|Label|LabelPrimitive|Controller|DayPicker|ChevronLeft|ArrowLeft|ArrowRight|Link|GripVertical|PanelLeft|Separator|Sheet|SheetContent|SheetDescription|SheetHeader|SheetTitle|SheetTrigger|Toast|ToastClose|ToastDescription|ToastProvider|ToastTitle|ToastViewport|App|Skeleton|Tooltip|TooltipContent|TooltipProvider|TooltipTrigger|Comp/u.","line":127,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":127,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"CommandWrapper"},"fix":{"range":[4112,4943],"text":""},"desc":"Remove unused variable 'CommandWrapper'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\nimport { Dialog, DialogContent } from \"./dialog\"\n\n/**\n * Safely check if a property exists on an object with type guards\n * @param {any} obj - The object to check\n * @param {string} prop - The property name to check for\n * @returns {boolean} Whether the property exists on the object\n */\nfunction hasProp(obj, prop) {\n  return obj !== null && \n         typeof obj === 'object' && \n         Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\n/**\n * Type guard for string values\n * @param {any} value - The value to check\n * @returns {boolean} Whether the value is a string\n */\nfunction isString(value) {\n  return typeof value === 'string';\n}\n\n/**\n * Extract and safely provide component props with type checking\n * @param {object | null | undefined} props - Raw component props\n * @param {string[]} excludeList - List of prop names to exclude from otherProps\n * @returns {{className: string, otherProps: object}} An object containing processed props\n */\nfunction extractSafeProps(props, excludeList = []) {\n  // Initialize with default empty values\n  const result = {\n    className: \"\",\n    otherProps: {}\n  };\n  \n  // Early return if props is not a valid object\n  if (props === null || typeof props !== 'object') {\n    return result;\n  }\n  \n  // Type-safe extraction of className\n  if (hasProp(props, 'className') && isString(props.className)) {\n    result.className = props.className;\n  }\n  \n  // Add all non-excluded properties to otherProps\n  Object.keys(props).forEach(key => {\n    if (!excludeList.includes(key) && key !== 'className') {\n      result.otherProps[key] = props[key];\n    }\n  });\n  \n  return result;\n}\n\n/**\n * @typedef {object} CommandProps\n * @property {string} [className] - Additional class names to apply to the component\n * @property {React.ReactNode} [children] - Child elements to render inside the component\n */\n\n/**\n * Command component for command menu\n * @param {CommandProps} props - Component props\n * @param {React.Ref<HTMLDivElement>} ref - Forwarded ref\n * @returns {JSX.Element} Command component\n */\nconst Command = React.forwardRef((props, ref) => {\n  // Use our utility function to safely extract props\n  const { className, otherProps } = extractSafeProps(props);\n  \n  return (\n    <CommandPrimitive\n      ref={ref}\n      className={cn(\n        \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n        className\n      )}\n      {...otherProps}\n    />\n  );\n});\n\nCommand.displayName = CommandPrimitive.displayName;\n\n/**\n * @typedef {object} CommandDialogProps\n * @property {React.ReactNode} [children] - Child elements to render inside the component\n */\n\n/**\n * Command dialog component for displaying command menu in a dialog\n * @param {any} props - Component props (using any to prevent type errors)\n * @returns {JSX.Element} Command dialog component\n */\nconst CommandDialog = (props) => {\n  // Initialize with defaults\n  let children = null;\n  const dialogProps = {};\n  \n  // Only process props if they exist and are an object\n  if (props && typeof props === 'object') {\n    // Extract children safely\n    if ('children' in props) {\n      children = props.children;\n    }\n    \n    // Extract all other props for the Dialog component\n    Object.keys(props).forEach(key => {\n      if (key !== 'children') {\n        dialogProps[key] = props[key];\n      }\n    });\n  }\n  \n  // Apply styles directly to avoid TypeScript errors\n  const commandClass = \"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\";\n  \n  // For simplicity, let's use a completely different approach\n  // This CommandDialog component will be the entry point that sets up our dialog structure\n  const CommandWrapper = () => {\n    // First render the dialog with the extracted props\n    return (\n      <Dialog {...dialogProps}>\n        {/* Manually create the DialogContent structure */}\n        <div className=\"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 overflow-hidden p-0 shadow-lg\">\n          {/* Apply cmdk-specific styling */}\n          <div className={commandClass}>\n            <div className=\"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\">\n              {/* Use the cmdk-root attribute for Command to work */}\n              <div data-cmdk-root>\n                {children}\n              </div>\n            </div>\n          </div>\n        </div>\n      </Dialog>\n    );\n  };\n  \n  // Return our custom implementation that bypasses TypeScript issues\n  return <CommandWrapper />;\n};\n\nCommandDialog.displayName = \"CommandDialog\";\n\n/**\n * @typedef {object} CommandInputProps\n * @property {string} [className] - Additional class names to apply to the component\n */\n\n/**\n * Command input component for searching in command menu\n * @param {CommandInputProps} props - Component props\n * @param {React.Ref<HTMLInputElement>} ref - Forwarded ref\n * @returns {JSX.Element} Command input component\n */\nconst CommandInput = React.forwardRef((props, ref) => {\n  // Use our utility function to safely extract props\n  const { className, otherProps } = extractSafeProps(props);\n  \n  // Create a custom input element to avoid TypeScript errors\n  const InputElement = () => {\n    return (\n      <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n        <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n        <CommandPrimitive.Input\n          ref={ref}\n          className={cn(\n            \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n            className\n          )}\n          {...otherProps}\n        />\n      </div>\n    );\n  };\n  \n  return <InputElement />;\n});\n\nCommandInput.displayName = CommandPrimitive.Input.displayName;\n\n/**\n * @typedef {object} CommandListProps\n * @property {string} [className] - Additional class names to apply to the component\n * @property {React.ReactNode} [children] - Child elements to render inside the component\n */\n\n/**\n * Command list component for displaying command items\n * @param {CommandListProps} props - Component props\n * @param {React.Ref<HTMLDivElement>} ref - Forwarded ref\n * @returns {JSX.Element} Command list component\n */\nconst CommandList = React.forwardRef((props, ref) => {\n  // Use our utility function to safely extract props\n  const { className, otherProps } = extractSafeProps(props);\n  \n  return (\n    <CommandPrimitive.List\n      ref={ref}\n      className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n      {...otherProps}\n    />\n  );\n});\n\nCommandList.displayName = CommandPrimitive.List.displayName;\n\n/**\n * @typedef {object} CommandEmptyProps\n * @property {string} [className] - Additional class names to apply to the component\n * @property {React.ReactNode} [children] - Child elements to render inside the component\n */\n\n/**\n * Command empty component for displaying when no results are found\n * @param {CommandEmptyProps} props - Component props\n * @param {React.Ref<HTMLDivElement>} ref - Forwarded ref\n * @returns {JSX.Element} Command empty component\n */\nconst CommandEmpty = React.forwardRef((props, ref) => {\n  // Use our utility function to safely extract props\n  const { className, otherProps } = extractSafeProps(props);\n  \n  return (\n    <CommandPrimitive.Empty\n      ref={ref}\n      className={cn(\"py-6 text-center text-sm\", className)}\n      {...otherProps}\n    />\n  );\n});\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName;\n\n/**\n * @typedef {object} CommandGroupProps\n * @property {string} [className] - Additional class names to apply to the component\n * @property {React.ReactNode} [children] - Child elements to render inside the component\n */\n\n/**\n * Command group component for grouping command items\n * @param {CommandGroupProps} props - Component props\n * @param {React.Ref<HTMLDivElement>} ref - Forwarded ref\n * @returns {JSX.Element} Command group component\n */\nconst CommandGroup = React.forwardRef((props, ref) => {\n  // Use our utility function to safely extract props\n  const { className, otherProps } = extractSafeProps(props);\n  \n  return (\n    <CommandPrimitive.Group\n      ref={ref}\n      className={cn(\n        \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n        className\n      )}\n      {...otherProps}\n    />\n  );\n});\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName;\n\n/**\n * @typedef {object} CommandSeparatorProps\n * @property {string} [className] - Additional class names to apply to the component\n */\n\n/**\n * Command separator component for visual separation between command items\n * @param {CommandSeparatorProps} props - Component props\n * @param {React.Ref<HTMLDivElement>} ref - Forwarded ref\n * @returns {JSX.Element} Command separator component\n */\nconst CommandSeparator = React.forwardRef((props, ref) => {\n  // Use our utility function to safely extract props\n  const { className, otherProps } = extractSafeProps(props);\n  \n  return (\n    <CommandPrimitive.Separator\n      ref={ref}\n      className={cn(\"-mx-1 h-px bg-border\", className)}\n      {...otherProps}\n    />\n  );\n});\n\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName;\n\n/**\n * @typedef {object} CommandItemProps\n * @property {string} [className] - Additional class names to apply to the component\n * @property {React.ReactNode} [children] - Child elements to render inside the component\n */\n\n/**\n * Command item component for individual command options\n * @param {CommandItemProps} props - Component props\n * @param {React.Ref<HTMLDivElement>} ref - Forwarded ref\n * @returns {JSX.Element} Command item component\n */\nconst CommandItem = React.forwardRef((props, ref) => {\n  // Use our utility function to safely extract props\n  const { className, otherProps } = extractSafeProps(props);\n  \n  return (\n    <CommandPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n        className\n      )}\n      {...otherProps}\n    />\n  );\n});\n\nCommandItem.displayName = CommandPrimitive.Item.displayName;\n\n/**\n * @typedef {object} CommandShortcutProps\n * @property {string} [className] - Additional class names to apply to the component\n * @property {React.ReactNode} [children] - Child elements to render inside the component\n */\n\n/**\n * Command shortcut component for displaying keyboard shortcuts\n * @param {CommandShortcutProps} props - Component props\n * @returns {JSX.Element} Command shortcut component\n */\nconst CommandShortcut = (props) => {\n  // Use our utility function to safely extract props\n  const { className, otherProps } = extractSafeProps(props);\n  \n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...otherProps}\n    />\n  );\n};\n\nCommandShortcut.displayName = \"CommandShortcut\";\n\n/**\n * Export Command components\n * @module Command\n */\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}","usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/components/ui/context-menu.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/components/ui/dialog.jsx","messages":[{"ruleId":"jsdoc/require-returns","severity":1,"message":"Missing JSDoc @returns declaration.","line":14,"column":3,"nodeType":"Block","endLine":17,"endColumn":6},{"ruleId":"jsdoc/require-returns","severity":1,"message":"Missing JSDoc @returns declaration.","line":37,"column":3,"nodeType":"Block","endLine":40,"endColumn":6},{"ruleId":"jsdoc/require-returns","severity":1,"message":"Missing JSDoc @returns declaration.","line":68,"column":1,"nodeType":"Block","endLine":71,"endColumn":4},{"ruleId":"jsdoc/require-returns","severity":1,"message":"Missing JSDoc @returns declaration.","line":86,"column":1,"nodeType":"Block","endLine":89,"endColumn":4},{"ruleId":"jsdoc/require-returns","severity":1,"message":"Missing JSDoc @returns declaration.","line":105,"column":3,"nodeType":"Block","endLine":108,"endColumn":6},{"ruleId":"jsdoc/require-returns","severity":1,"message":"Missing JSDoc @returns declaration.","line":125,"column":3,"nodeType":"Block","endLine":128,"endColumn":6}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\nimport { cn } from \"../../lib/utils.js\" // ✅ fixed alias\n\nconst Dialog = DialogPrimitive.Root\nconst DialogTrigger = DialogPrimitive.Trigger\nconst DialogPortal = DialogPrimitive.Portal\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef(\n  /**\n   * @param {{ className?: string }} props\n   * @param {React.Ref<React.ElementRef<typeof DialogPrimitive.Overlay>>} ref\n   */\n  function DialogOverlay(props, ref) {\n    const safeProps = props || {}\n    const { className, ...rest } = safeProps\n\n    return (\n      <DialogPrimitive.Overlay\n        ref={ref}\n        className={cn(\n          \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n          className\n        )}\n        {...rest}\n      />\n    )\n  }\n)\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef(\n  /**\n   * @param {{ className?: string, children?: React.ReactNode }} props\n   * @param {React.Ref<React.ElementRef<typeof DialogPrimitive.Content>>} ref\n   */\n  function DialogContent(props, ref) {\n    const safeProps = props || {}\n    const { className, children, ...rest } = safeProps\n\n    return (\n      <DialogPortal>\n        <DialogOverlay />\n        <DialogPrimitive.Content\n          ref={ref}\n          className={cn(\n            \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n            className\n          )}\n          {...rest}\n        >\n          {children}\n          <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n            <X className=\"h-4 w-4\" />\n            <span className=\"sr-only\">Close</span>\n          </DialogPrimitive.Close>\n        </DialogPrimitive.Content>\n      </DialogPortal>\n    )\n  }\n)\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\n/**\n *\n * @param props\n */\nconst DialogHeader = (\n  /** @type {{ className?: string, [key: string]: any }} */ props\n) => {\n  const safeProps = props || {}\n  const { className, ...rest } = safeProps\n  return (\n    <div\n      className={cn(\"flex flex-col space-y-1.5 text-center sm:text-left\", className)}\n      {...rest}\n    />\n  )\n}\nDialogHeader.displayName = \"DialogHeader\"\n\n/**\n *\n * @param props\n */\nconst DialogFooter = (\n  /** @type {{ className?: string, [key: string]: any }} */ props\n) => {\n  const safeProps = props || {}\n  const { className, ...rest } = safeProps\n  return (\n    <div\n      className={cn(\"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\", className)}\n      {...rest}\n    />\n  )\n}\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef(\n  /**\n   * @param {{ className?: string }} props\n   * @param {React.Ref<React.ElementRef<typeof DialogPrimitive.Title>>} ref\n   */\n  function DialogTitle(props, ref) {\n    const safeProps = props || {}\n    const { className, ...rest } = safeProps\n\n    return (\n      <DialogPrimitive.Title\n        ref={ref}\n        className={cn(\"text-lg font-semibold leading-none tracking-tight\", className)}\n        {...rest}\n      />\n    )\n  }\n)\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef(\n  /**\n   * @param {{ className?: string }} props\n   * @param {React.Ref<React.ElementRef<typeof DialogPrimitive.Description>>} ref\n   */\n  function DialogDescription(props, ref) {\n    const safeProps = props || {}\n    const { className, ...rest } = safeProps\n\n    return (\n      <DialogPrimitive.Description\n        ref={ref}\n        className={cn(\"text-sm text-muted-foreground\", className)}\n        {...rest}\n      />\n    )\n  }\n)\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\n/**\n *\n */\nexport {\n  Dialog,\n  DialogTrigger,\n  DialogPortal,\n  DialogClose,\n  DialogOverlay,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/components/ui/drawer.jsx","messages":[{"ruleId":"jsdoc/require-returns","severity":1,"message":"Missing JSDoc @returns declaration.","line":29,"column":3,"nodeType":"Block","endLine":32,"endColumn":6},{"ruleId":"jsdoc/require-returns","severity":1,"message":"Missing JSDoc @returns declaration.","line":48,"column":3,"nodeType":"Block","endLine":51,"endColumn":6}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\nimport { cn } from \"../../lib/utils.js\" // fixed path alias\n\n/**\n * Drawer component from Vaul\n * @param {object} props - Component props\n * @param {boolean} [props.shouldScaleBackground=true] - Whether to scale the background when drawer is open\n * @returns {JSX.Element} Drawer component\n */\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\nconst DrawerPortal = DrawerPrimitive.Portal\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef(\n  /**\n   * @param {{ className?: string }} props\n   * @param {React.Ref<HTMLDivElement>} ref\n   */\n  function DrawerOverlay(props, ref) {\n    const safeProps = props || {}\n    const { className = \"\", ...rest } = safeProps\n    return (\n      <DrawerPrimitive.Overlay\n        ref={ref}\n        className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n        {...rest}\n      />\n    )\n  }\n)\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef(\n  /**\n   * @param {{ className?: string, children?: React.ReactNode }} props\n   * @param {React.Ref<HTMLDivElement>} ref\n   */\n  function DrawerContent(props, ref) {\n    const safeProps = props || {}\n    const { className = \"\", children = null, ...rest } = safeProps\n\n    return (\n      <DrawerPortal>\n        <DrawerOverlay />\n        <DrawerPrimitive.Content\n          ref={ref}\n          className={cn(\n            \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n            className\n          )}\n          {...rest}\n        >\n          <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n          {children}\n        </DrawerPrimitive.Content>\n      </DrawerPortal>\n    )\n  }\n)\nDrawerContent.displayName = \"DrawerContent\"\n\n/**\n * DrawerHeader component for drawer header content\n * @param {object} props - Component props\n * @param {string} [props.className=\"\"] - Additional CSS class names\n * @returns {JSX.Element} DrawerHeader component\n */\nconst DrawerHeader = (props) => {\n  const { className = \"\", ...rest } = props || {}\n  return (\n    <div\n      className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n      {...rest}\n    />\n  )\n}\nDrawerHeader.displayName = \"DrawerHeader\"\n\n/**\n * DrawerFooter component for drawer footer content\n * @param {object} props - Component props\n * @param {string} [props.className=\"\"] - Additional CSS class names\n * @returns {JSX.Element} DrawerFooter component\n */\nconst DrawerFooter = (props) => {\n  const { className = \"\", ...rest } = props || {}\n  return (\n    <div\n      className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n      {...rest}\n    />\n  )\n}\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef(\n  /**\n   * @param {object} props - Component props\n   * @param {string} [props.className=\"\"] - Additional CSS class names\n   * @param {React.ReactNode} [props.children] - Child elements\n   * @param {React.Ref<HTMLHeadingElement>} ref - Forwarded ref\n   * @returns {JSX.Element} DrawerTitle component\n   */\n  function DrawerTitle(props, ref) {\n    const { className = \"\", ...rest } = props || {}\n    return (\n      <DrawerPrimitive.Title\n        ref={ref}\n        className={cn(\"text-lg font-semibold leading-none tracking-tight\", className)}\n        {...rest}\n      />\n    )\n  }\n)\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef(\n  /**\n   * @param {object} props - Component props\n   * @param {string} [props.className=\"\"] - Additional CSS class names\n   * @param {React.ReactNode} [props.children] - Child elements\n   * @param {React.Ref<HTMLParagraphElement>} ref - Forwarded ref\n   * @returns {JSX.Element} DrawerDescription component\n   */\n  function DrawerDescription(props, ref) {\n    const { className = \"\", ...rest } = props || {}\n    return (\n      <DrawerPrimitive.Description\n        ref={ref}\n        className={cn(\"text-sm text-muted-foreground\", className)}\n        {...rest}\n      />\n    )\n  }\n)\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\n/**\n * Export drawer components for use in the application\n */\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/components/ui/dropdown-menu.jsx","messages":[{"ruleId":"jsdoc/require-returns","severity":1,"message":"Missing JSDoc @returns declaration.","line":211,"column":3,"nodeType":"Block","endLine":214,"endColumn":6}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\";\nimport { Check, ChevronRight, Circle } from \"lucide-react\";\nimport { cn } from \"../../lib/utils\";\n\n/**\n * @typedef {object} DropdownBaseProps\n * @property {string} [className]\n * @property {boolean} [inset]\n * @property {React.ReactNode} [children]\n */\n\n/**\n * Custom Radix UI event handler that matches the required signature\n * @callback RadixSelectHandler\n * @param {Event} event - DOM event\n * @returns {void}\n */\n\n/**\n * @typedef {object} RadixDropdownProps\n * @property {RadixSelectHandler} [onSelect]\n */\n\n/**\n * @typedef {DropdownBaseProps & React.HTMLAttributes<HTMLDivElement> & RadixDropdownProps} DropdownItemProps\n */\n\n/** Root DropdownMenu container */\nconst DropdownMenu = DropdownMenuPrimitive.Root;\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group;\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal;\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub;\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup;\n\n/** @type {React.ForwardRefExoticComponent<DropdownItemProps & React.RefAttributes<HTMLDivElement>>} */\nconst DropdownMenuSubTrigger = React.forwardRef(function SubTrigger(props, ref) {\n  const { className, inset, children, ...rest } = /** @type {DropdownItemProps} */ (props);\n  return (\n    <DropdownMenuPrimitive.SubTrigger\n      ref={ref}\n      className={cn(\n        \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n        inset && \"pl-8\",\n        className\n      )}\n      {...rest}\n    >\n      {children}\n      <ChevronRight className=\"ml-auto\" />\n    </DropdownMenuPrimitive.SubTrigger>\n  );\n});\n\n/** @type {React.ForwardRefExoticComponent<DropdownItemProps & React.RefAttributes<HTMLDivElement>>} */\nconst DropdownMenuSubContent = React.forwardRef(function SubContent(props, ref) {\n  const { className, ...rest } = /** @type {DropdownItemProps} */ (props);\n  return (\n    <DropdownMenuPrimitive.SubContent\n      ref={ref}\n      className={cn(\"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md\", className)}\n      {...rest}\n    />\n  );\n});\n\n/**\n * @typedef {DropdownItemProps & { sideOffset?: number }} DropdownContentProps\n */\n\n/** @type {React.ForwardRefExoticComponent<DropdownContentProps & React.RefAttributes<HTMLDivElement>>} */\nconst DropdownMenuContent = React.forwardRef(function Content(props, ref) {\n  const { className, sideOffset = 4, ...rest } = /** @type {DropdownContentProps} */ (props);\n  return (\n    <DropdownMenuPrimitive.Portal>\n      <DropdownMenuPrimitive.Content\n        ref={ref}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md\",\n          className\n        )}\n        {...rest}\n      />\n    </DropdownMenuPrimitive.Portal>\n  );\n});\n\n/**\n * A dropdown menu item component\n * @type {React.ForwardRefExoticComponent<DropdownItemProps & React.RefAttributes<HTMLDivElement>>}\n */\nconst DropdownMenuItem = React.forwardRef(function Item(props, ref) {\n  // Safely handle null/undefined props\n  const safeProps = props || {};\n  \n  // Safely extract properties with proper type checking\n  let className;\n  if (typeof safeProps === 'object' && 'className' in safeProps) {\n    className = safeProps.className;\n  }\n  \n  let inset = false;\n  if (typeof safeProps === 'object' && 'inset' in safeProps) {\n    inset = Boolean(safeProps.inset);\n  }\n  \n  let children;\n  if (typeof safeProps === 'object' && 'children' in safeProps) {\n    children = safeProps.children;\n  }\n  \n  // Extract remaining props\n  const rest = {};\n  if (typeof safeProps === 'object') {\n    Object.keys(safeProps).forEach(key => {\n      if (!['className', 'inset', 'children'].includes(key)) {\n        rest[key] = safeProps[key];\n      }\n    });\n  }\n  \n  return (\n    <DropdownMenuPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground\",\n        inset && \"pl-8\",\n        className\n      )}\n      {...rest}\n    >\n      {children}\n    </DropdownMenuPrimitive.Item>\n  );\n});\n\n/**\n * @typedef {object} CustomCheckboxItemProps\n * @property {string} [className] - Additional class names\n * @property {React.ReactNode} [children] - Child elements\n * @property {boolean} [checked] - Whether the checkbox is checked\n * @property {boolean} [inset] - Whether the item is inset\n */\n\n/**\n * A dropdown menu checkbox item component\n * @type {React.ForwardRefExoticComponent<React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem> & React.RefAttributes<HTMLDivElement>>}\n */\nconst DropdownMenuCheckboxItem = React.forwardRef(function CheckboxItem(props, ref) {\n  // Safely handle null/undefined props\n  const safeProps = props || {};\n  \n  // Safely extract properties with type checking\n  let className;\n  if (typeof safeProps === 'object' && 'className' in safeProps) {\n    className = safeProps.className;\n  }\n  \n  let children;\n  if (typeof safeProps === 'object' && 'children' in safeProps) {\n    children = safeProps.children;\n  }\n  \n  let checked;\n  if (typeof safeProps === 'object' && 'checked' in safeProps) {\n    checked = Boolean(safeProps.checked);\n  }\n  \n  // Extract remaining props excluding special properties\n  const rest = {};\n  if (typeof safeProps === 'object') {\n    Object.keys(safeProps).forEach(key => {\n      if (!['className', 'children', 'checked'].includes(key)) {\n        rest[key] = safeProps[key];\n      }\n    });\n  }\n  \n  return (\n    <DropdownMenuPrimitive.CheckboxItem\n      ref={ref}\n      checked={checked}\n      className={cn(\"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none\", className)}\n      {...rest}\n    >\n      <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <Check className=\"h-4 w-4\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.CheckboxItem>\n  );\n});\n\n/**\n * @typedef {object} CustomRadioItemProps\n * @property {string} [className] - Additional class names\n * @property {React.ReactNode} [children] - Child elements\n * @property {string} value - The radio item's value\n * @property {boolean} [inset] - Whether the item is inset\n */\n\n/**\n * A dropdown menu radio item component\n * @type {React.ForwardRefExoticComponent<React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem> & React.RefAttributes<HTMLDivElement>>}\n */\nconst DropdownMenuRadioItem = React.forwardRef(\n  /** \n   * @param {object} props - The component props\n   * @param {React.Ref<HTMLDivElement>} ref - The forwarded ref\n   */\n  function RadioItem(props, ref) {\n  // Safely handle null/undefined props\n  const safeProps = props || {};\n  \n  // Safely extract properties with type checking\n  let className;\n  if (typeof safeProps === 'object' && 'className' in safeProps) {\n    className = safeProps.className;\n  }\n  \n  // Cast children explicitly to React.ReactNode with proper checks\n  let childrenProp = null;\n  if (\n    typeof safeProps === 'object' && \n    safeProps !== null && \n    'children' in safeProps\n  ) {\n    // Verify it's something React can render\n    const children = safeProps.children;\n    if (\n      children === null || \n      children === undefined || \n      typeof children === 'string' || \n      typeof children === 'number' || \n      typeof children === 'boolean' || \n      React.isValidElement(children) ||\n      Array.isArray(children)\n    ) {\n      childrenProp = children;\n    }\n  }\n  \n  // Value is required, but provide a safe fallback\n  let value = '';\n  if (typeof safeProps === 'object' && 'value' in safeProps) {\n    value = String(safeProps.value);\n  }\n  \n  // Extract remaining props safely\n  const rest = {};\n  if (typeof safeProps === 'object') {\n    Object.keys(safeProps).forEach(key => {\n      if (!['className', 'children', 'value'].includes(key)) {\n        rest[key] = safeProps[key];\n      }\n    });\n  }\n  \n  return (\n    <DropdownMenuPrimitive.RadioItem\n      ref={ref}\n      value={value}\n      className={cn(\"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none\", className)}\n      {...rest}\n    >\n      <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <Circle className=\"h-2 w-2 fill-current\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {/* Render children safely */}\n      {typeof childrenProp === 'undefined' ? null : childrenProp}\n    </DropdownMenuPrimitive.RadioItem>\n  );\n});\n\n/**\n * A dropdown menu label component\n * @type {React.ForwardRefExoticComponent<React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & React.RefAttributes<HTMLDivElement>>}\n */\nconst DropdownMenuLabel = React.forwardRef(function Label(props, ref) {\n  // Safely handle null/undefined props\n  const safeProps = props || {};\n  \n  // Safely extract properties with type checking\n  let className;\n  if (typeof safeProps === 'object' && 'className' in safeProps) {\n    className = safeProps.className;\n  }\n  \n  let inset = false;\n  if (typeof safeProps === 'object' && 'inset' in safeProps) {\n    inset = Boolean(safeProps.inset);\n  }\n  \n  // Extract remaining props\n  const rest = {};\n  if (typeof safeProps === 'object') {\n    Object.keys(safeProps).forEach(key => {\n      if (!['className', 'inset'].includes(key)) {\n        rest[key] = safeProps[key];\n      }\n    });\n  }\n  \n  return (\n    <DropdownMenuPrimitive.Label\n      ref={ref}\n      className={cn(\"px-2 py-1.5 text-sm font-semibold\", inset && \"pl-8\", className)}\n      {...rest}\n    />\n  );\n});\n\n/**\n * A dropdown menu separator component\n * @type {React.ForwardRefExoticComponent<React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator> & React.RefAttributes<HTMLDivElement>>}\n */\nconst DropdownMenuSeparator = React.forwardRef(function Separator(props, ref) {\n  // Safely handle null/undefined props\n  const safeProps = props || {};\n  \n  // Safely extract properties with type checking\n  let className;\n  if (typeof safeProps === 'object' && 'className' in safeProps) {\n    className = safeProps.className;\n  }\n  \n  // Extract remaining props safely\n  const rest = {};\n  if (typeof safeProps === 'object') {\n    Object.keys(safeProps).forEach(key => {\n      if (!['className'].includes(key)) {\n        rest[key] = safeProps[key];\n      }\n    });\n  }\n  \n  return (\n    <DropdownMenuPrimitive.Separator\n      ref={ref}\n      className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n      {...rest}\n    />\n  );\n});\n\n/**\n * @typedef {object} ShortcutProps\n * @property {string} [className]\n */\n\n/** @type {(props: ShortcutProps & React.HTMLAttributes<HTMLSpanElement>) => JSX.Element} */\nconst DropdownMenuShortcut = (props) => {\n  const { className, ...rest } = props ?? {};\n  return (\n    <span className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)} {...rest} />\n  );\n};\n\n/**\n *\n */\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/components/ui/form.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'getProp' is defined but never used. Allowed unused vars must match /React|Switch|Route|Redirect|Router|QueryClientProvider|AuthProvider|ProtectedRoute|ChatPage|ChevronRight|MoreHorizontal|ChevronDown|ChevronUp|Search|CheckIcon|ChevronsUpDown|Circle|X|Plus|Minus|Slot|Check|Button|Input|MessageBubble|SocialLoginButton|FcGoogle|FaMicrosoft|FaApple|OTPInput|OTPInputContext|Dot|Dialog|DialogContent|Label|LabelPrimitive|Controller|DayPicker|ChevronLeft|ArrowLeft|ArrowRight|Link|GripVertical|PanelLeft|Separator|Sheet|SheetContent|SheetDescription|SheetHeader|SheetTitle|SheetTrigger|Toast|ToastClose|ToastDescription|ToastProvider|ToastTitle|ToastViewport|App|Skeleton|Tooltip|TooltipContent|TooltipProvider|TooltipTrigger|Comp/u.","line":156,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":156,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"getProp"},"fix":{"range":[4551,4812],"text":""},"desc":"Remove unused variable 'getProp'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext\n} from \"react-hook-form\"\n\nimport { cn } from \"../../lib/utils\"\nimport { Label } from \"./label\"\n\n/**\n * Form provider component from react-hook-form\n */\nconst Form = FormProvider\n\n/**\n * Create form field context with default value\n */\nconst FormFieldContext = React.createContext({ name: \"\" })\n\n/**\n * Create form item context with default value\n */\nconst FormItemContext = React.createContext({ id: \"\" })\n\n/**\n * Checks if a value is a valid FormFieldContext\n * @param {any} context - The context to check\n * @returns {boolean} Whether the context is valid\n */\nfunction isFormFieldContext(context) {\n  return Boolean(context) && \n         typeof context === 'object' && \n         'name' in context && \n         typeof context.name === \"string\"\n}\n\n/**\n * Checks if a value is a valid FormItemContext\n * @param {any} context - The context to check\n * @returns {boolean} Whether the context is valid\n */\nfunction isFormItemContext(context) {\n  return Boolean(context) && \n         typeof context === 'object' && \n         'id' in context && \n         typeof context.id === \"string\"\n}\n\n/**\n * FormField component for form fields\n * @param {object} props - Component props\n * @returns {JSX.Element} FormField component\n */\nfunction FormField(props) {\n  // Safely extract name from props\n  const name = props?.name || \"\";\n  \n  /**\n   * Renders the field content\n   * @param {object} renderProps - Props from Controller\n   * @returns {JSX.Element} Rendered content\n   */\n  const renderWrapper = (renderProps) => {\n    // Ensure we always return a JSX element\n    if (typeof props?.render === 'function') {\n      try {\n        const result = props.render(renderProps);\n        // Ensure result is a valid JSX element\n        return React.isValidElement(result) ? result : <div>{String(result || \"\")}</div>;\n      } catch (err) {\n        console.error(\"Error in form field render function:\", err);\n        return <div>Error rendering field</div>;\n      }\n    }\n    \n    // Default rendering with proper fallbacks\n    return <div>{renderProps?.field?.value || \"\"}</div>;\n  };\n\n  return (\n    <FormFieldContext.Provider value={{ name }}>\n      <Controller {...props} render={renderWrapper} />\n    </FormFieldContext.Provider>\n  );\n}\n\n/**\n * Custom hook for form field context\n * @returns {object} Form field properties and state\n */\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext);\n  const itemContext = React.useContext(FormItemContext);\n  \n  // Get form context with fallback\n  let form = null;\n  try {\n    form = useFormContext();\n  } catch (err) {\n    console.error(\"Error getting form context:\", err);\n  }\n\n  // Validate contexts\n  if (!isFormFieldContext(fieldContext)) {\n    throw new Error(\"useFormField must be used inside <FormField>\");\n  }\n  \n  if (!isFormItemContext(itemContext)) {\n    throw new Error(\"useFormField must be used inside <FormItem>\");\n  }\n\n  // Initialize with safe defaults\n  const result = {\n    id: itemContext.id || \"\",\n    name: fieldContext.name || \"\",\n    formItemId: `${itemContext.id || \"field\"}-form-item`,\n    formDescriptionId: `${itemContext.id || \"field\"}-form-item-description`,\n    formMessageId: `${itemContext.id || \"field\"}-form-item-message`,\n    error: null,\n    invalid: false,\n    isTouched: false,\n    isDirty: false\n  };\n  \n  // Safely get field state if available\n  if (form && typeof form.getFieldState === 'function' && form.formState) {\n    try {\n      const fieldState = form.getFieldState(fieldContext.name, form.formState);\n      if (fieldState) {\n        // Update state properties safely\n        if (fieldState.error !== undefined) result.error = fieldState.error;\n        if (fieldState.invalid !== undefined) result.invalid = !!fieldState.invalid;\n        if (fieldState.isTouched !== undefined) result.isTouched = !!fieldState.isTouched;\n        if (fieldState.isDirty !== undefined) result.isDirty = !!fieldState.isDirty;\n      }\n    } catch (err) {\n      console.error(\"Error getting field state:\", err);\n    }\n  }\n\n  return result;\n}\n\n/**\n * Common property getter function to safely access properties\n * @param {object | null | undefined} obj - The object to get property from\n * @param {string} prop - The property name\n * @param {any} defaultValue - Default value if property doesn't exist\n * @returns {any} - The property value or default value\n */\nfunction getProp(obj, prop, defaultValue) {\n  if (!obj || typeof obj !== 'object') return defaultValue;\n  // Use safer check that works even when hasOwnProperty is overridden\n  return Object.prototype.hasOwnProperty.call(obj, prop) ? obj[prop] : defaultValue;\n}\n\n/**\n * Safely extracts specific props and returns them with all other props\n * @param {object | null | undefined} props - Component props\n * @param {string[]} propNames - Names of props to extract\n * @param {object} defaults - Default values for props\n * @returns {object} - Object containing extracted props and rest props\n */\nfunction extractProps(props, propNames, defaults = {}) {\n  // Initialize result with default values\n  const result = { ...defaults };\n  \n  // Initialize rest object for remaining props\n  const rest = {};\n  \n  // Return early if props is not an object\n  if (!props || typeof props !== 'object') {\n    return { ...result, rest };\n  }\n  \n  // Extract specified props\n  propNames.forEach(name => {\n    if (Object.prototype.hasOwnProperty.call(props, name)) {\n      result[name] = props[name];\n    }\n  });\n  \n  // Extract remaining props\n  Object.keys(props).forEach(key => {\n    if (!propNames.includes(key)) {\n      rest[key] = props[key];\n    }\n  });\n  \n  // Add rest to result\n  result.rest = rest;\n  \n  return result;\n}\n\n/**\n * FormItem component that provides the container for form field elements\n * @param {object} props - Component props \n * @param {React.Ref<HTMLDivElement>} ref - Ref to the div element\n * @returns {JSX.Element} FormItem component\n */\nconst FormItem = React.forwardRef(function FormItem(props, ref) {\n  // Generate unique ID for form item\n  const id = React.useId();\n  \n  // Extract props safely using the helper function\n  const { className = '', children = null, rest } = extractProps(\n    props, \n    ['className', 'children'], \n    { className: '', children: null }\n  );\n  \n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div \n        ref={ref} \n        className={cn(\"space-y-2\", className)} \n        {...rest}\n      >\n        {children}\n      </div>\n    </FormItemContext.Provider>\n  );\n});\n\n// Set display name for debugging\nFormItem.displayName = \"FormItem\";\n\n/**\n * FormLabel component that renders a label for form fields\n * @param {object} props - Component props\n * @param {React.Ref<HTMLLabelElement>} ref - Ref to the label element\n * @returns {JSX.Element} FormLabel component\n */\nconst FormLabel = React.forwardRef(function FormLabel(props, ref) {\n  // Extract props safely using the helper function\n  const { className = '', children = null, rest } = extractProps(\n    props, \n    ['className', 'children'], \n    { className: '', children: null }\n  );\n  \n  // Get form field context\n  const formField = useFormField();\n  const error = formField.error;\n  const formItemId = formField.formItemId;\n  \n  return (\n    <Label\n      ref={ref}\n      htmlFor={formItemId}\n      className={cn(error && \"text-destructive\", className)}\n      {...rest}\n    >\n      {children}\n    </Label>\n  );\n});\n\n// Set display name for debugging\nFormLabel.displayName = \"FormLabel\";\n\n/**\n * FormControl component that wraps form input elements\n * @param {object} props - Component props\n * @param {React.Ref<HTMLElement>} ref - Ref to the element\n * @returns {JSX.Element} FormControl component\n */\nconst FormControl = React.forwardRef(function FormControl(props, ref) {\n  // Extract props safely using the helper function\n  const { children = null, rest } = extractProps(\n    props, \n    ['children'], \n    { children: null }\n  );\n  \n  // Get form field context with all needed properties\n  const formField = useFormField();\n  const error = formField.error;\n  const formItemId = formField.formItemId;\n  const formDescriptionId = formField.formDescriptionId;\n  const formMessageId = formField.formMessageId;\n  \n  // Create aria-describedby with proper checks\n  const describedBy = error \n    ? `${formDescriptionId} ${formMessageId}` \n    : formDescriptionId;\n  \n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={describedBy}\n      aria-invalid={!!error}\n      {...rest}\n    >\n      {children}\n    </Slot>\n  );\n});\n\n// Set display name for debugging\nFormControl.displayName = \"FormControl\";\n\n/**\n * FormDescription component that displays help text for form fields\n * @param {object} props - Component props\n * @param {React.Ref<HTMLParagraphElement>} ref - Ref to the paragraph element\n * @returns {JSX.Element} FormDescription component\n */\nconst FormDescription = React.forwardRef(function FormDescription(props, ref) {\n  // Extract props safely using the helper function\n  const { className = '', children = null, rest } = extractProps(\n    props, \n    ['className', 'children'], \n    { className: '', children: null }\n  );\n  \n  // Get form field context\n  const formField = useFormField();\n  const formDescriptionId = formField.formDescriptionId;\n  \n  return (\n    <p \n      ref={ref} \n      id={formDescriptionId} \n      className={cn(\"text-sm text-muted-foreground\", className)} \n      {...rest}\n    >\n      {children}\n    </p>\n  );\n});\n\n// Set display name for debugging\nFormDescription.displayName = \"FormDescription\";\n\n/**\n * FormMessage component that displays validation errors for form fields\n * @param {object} props - Component props\n * @param {React.Ref<HTMLParagraphElement>} ref - Ref to the paragraph element\n * @returns {JSX.Element|null} FormMessage component or null if no message\n */\nconst FormMessage = React.forwardRef(function FormMessage(props, ref) {\n  // Extract props safely using the helper function\n  const { className = '', children = null, rest } = extractProps(\n    props, \n    ['className', 'children'], \n    { className: '', children: null }\n  );\n  \n  // Get form field context\n  const formField = useFormField();\n  const error = formField.error;\n  const formMessageId = formField.formMessageId;\n  \n  // Determine what to display based on error or children\n  let body = null;\n  \n  // Process errors safely\n  if (error) {\n    if (typeof error === \"string\") {\n      body = error;\n    } else if (error && typeof error === 'object' && 'message' in error) {\n      body = typeof error.message === \"string\" ? error.message : \"Error\";\n    } else {\n      body = \"An error occurred\";\n    }\n  } else {\n    body = children;\n  }\n\n  // Don't render if no content\n  if (!body) {\n    return null;\n  }\n\n  return (\n    <p \n      ref={ref} \n      id={formMessageId} \n      className={cn(\"text-sm font-medium text-destructive\", className)} \n      {...rest}\n    >\n      {body}\n    </p>\n  );\n});\n\n// Set display name for debugging\nFormMessage.displayName = \"FormMessage\";\n\n/**\n *\n */\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/components/ui/hover-card.jsx","messages":[{"ruleId":"jsdoc/require-returns","severity":1,"message":"Missing JSDoc @returns declaration.","line":25,"column":3,"nodeType":"Block","endLine":28,"endColumn":6}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\n/**\n * HoverCardContent component props\n * @typedef {object} HoverCardContentProps\n * @property {string} [className] - Additional class names\n * @property {'center'|'start'|'end'} [align='center'] - Alignment of the content relative to the trigger\n * @property {number} [sideOffset=4] - Offset from the trigger element\n */\n\n/**\n * Hover card content component for displaying information on hover\n * @type {React.ForwardRefExoticComponent<React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content> & React.RefAttributes<React.ElementRef<typeof HoverCardPrimitive.Content>>>}\n */\nconst HoverCardContent = React.forwardRef(\n  /**\n   * @param {React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>} props\n   * @param {React.ForwardedRef<React.ElementRef<typeof HoverCardPrimitive.Content>>} ref\n   */\n  (props, ref) => {\n    // Safe props access with defaults\n    const {\n      className,\n      align = \"center\",\n      sideOffset = 4,\n      ...restProps\n    } = props || {};\n\n    return (\n      <HoverCardPrimitive.Content\n        ref={ref}\n        align={align}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n          className\n        )}\n        {...restProps}\n      />\n    );\n  }\n);\n\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\n/**\n * Export HoverCard components\n * @module HoverCard\n */\nexport { HoverCard, HoverCardTrigger, HoverCardContent }","usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/components/ui/input-otp.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'SafeUtil' is assigned a value but never used. Allowed unused vars must match /React|Switch|Route|Redirect|Router|QueryClientProvider|AuthProvider|ProtectedRoute|ChatPage|ChevronRight|MoreHorizontal|ChevronDown|ChevronUp|Search|CheckIcon|ChevronsUpDown|Circle|X|Plus|Minus|Slot|Check|Button|Input|MessageBubble|SocialLoginButton|FcGoogle|FaMicrosoft|FaApple|OTPInput|OTPInputContext|Dot|Dialog|DialogContent|Label|LabelPrimitive|Controller|DayPicker|ChevronLeft|ArrowLeft|ArrowRight|Link|GripVertical|PanelLeft|Separator|Sheet|SheetContent|SheetDescription|SheetHeader|SheetTitle|SheetTrigger|Toast|ToastClose|ToastDescription|ToastProvider|ToastTitle|ToastViewport|App|Skeleton|Tooltip|TooltipContent|TooltipProvider|TooltipTrigger|Comp/u.","line":9,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":15}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\nimport { cn } from \"../../lib/utils\"\n\n// Object containing null-safe utility functions\nconst SafeUtil = {\n  // Type-safe property accessor with default value\n  getProp: (obj, prop, defaultValue = \"\") => {\n    if (obj && typeof obj === \"object\" && prop in obj) {\n      return obj[prop];\n    }\n    return defaultValue;\n  }\n};\n\n/**\n * Input OTP component for OTP input fields\n */\nconst InputOTP = React.forwardRef((props, ref) => {\n  // Use functional component to avoid TypeScript issues\n  function SafeInputOTP() {\n    // The component's children with proper ReactNode typing\n    const children = props && \n      typeof props === \"object\" && \n      \"children\" in props \n        ? /** @type {React.ReactNode} */ (props.children) \n        : null;\n    \n    // Container className with safe access\n    const containerClassName = props && \n      typeof props === \"object\" && \n      \"containerClassName\" in props && \n      typeof props.containerClassName === \"string\" \n        ? props.containerClassName \n        : \"\";\n    \n    // Input className with safe access\n    const className = props && \n      typeof props === \"object\" && \n      \"className\" in props && \n      typeof props.className === \"string\" \n        ? props.className \n        : \"\";\n        \n    // Get maxLength with safe access\n    const maxLength = props && \n      typeof props === \"object\" && \n      \"maxLength\" in props \n        ? props.maxLength \n        : undefined;\n    \n    // Get remaining props safely\n    const otherProps = {};\n    if (props && typeof props === \"object\") {\n      Object.keys(props).forEach(key => {\n        if (![\"className\", \"containerClassName\", \"maxLength\", \"children\"].includes(key)) {\n          otherProps[key] = props[key];\n        }\n      });\n    }\n    \n    // Create a standard div structure that mimics OTP input behavior\n    return (\n      <div \n        className={cn(\n          \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n          containerClassName\n        )}\n      >\n        <div\n          className={cn(\"disabled:cursor-not-allowed\", className)}\n          ref={ref}\n          data-otp-input=\"true\"\n          data-max-length={maxLength}\n          {...otherProps}\n        >\n          {React.isValidElement(children) ? children : null}\n        </div>\n      </div>\n    );\n  }\n  \n  return <SafeInputOTP />;\n});\nInputOTP.displayName = \"InputOTP\"\n\n/**\n * Input OTP group component\n */\nconst InputOTPGroup = React.forwardRef(function InputOTPGroup(props, ref) {\n  // Use safe property access\n  const className = props && \n    typeof props === \"object\" && \n    \"className\" in props && \n    typeof props.className === \"string\" \n      ? props.className \n      : \"\";\n  \n  // Extract remaining props safely\n  const otherProps = {};\n  if (props && typeof props === \"object\") {\n    Object.keys(props).forEach(key => {\n      if (key !== \"className\") {\n        otherProps[key] = props[key];\n      }\n    });\n  }\n  \n  return (\n    <div ref={ref} className={cn(\"flex items-center\", className)} {...otherProps} />\n  )\n})\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\n/**\n * Input OTP slot component\n */\nconst InputOTPSlot = React.forwardRef(function InputOTPSlot(props, ref) {\n  // Safe property access\n  const className = props && \n    typeof props === \"object\" && \n    \"className\" in props && \n    typeof props.className === \"string\" \n      ? props.className \n      : \"\";\n      \n  // Safe index access\n  const index = props && \n    typeof props === \"object\" && \n    \"index\" in props && \n    typeof props.index === \"number\" \n      ? props.index \n      : 0;\n  \n  // Extract remaining props safely\n  const otherProps = {};\n  if (props && typeof props === \"object\") {\n    Object.keys(props).forEach(key => {\n      if (![\"className\", \"index\"].includes(key)) {\n        otherProps[key] = props[key];\n      }\n    });\n  }\n  \n  // Safe context access\n  const inputOTPContext = React.useContext(OTPInputContext);\n  \n  // Get slot data safely\n  let char = \"\";\n  let hasFakeCaret = false;\n  let isActive = false;\n  \n  if (inputOTPContext && \n      typeof inputOTPContext === \"object\" && \n      \"slots\" in inputOTPContext && \n      Array.isArray(inputOTPContext.slots) && \n      inputOTPContext.slots[index]) {\n    \n    const slot = inputOTPContext.slots[index];\n    \n    if (slot && typeof slot === \"object\") {\n      if (\"char\" in slot && typeof slot.char === \"string\") {\n        char = slot.char;\n      }\n      \n      if (\"hasFakeCaret\" in slot && typeof slot.hasFakeCaret === \"boolean\") {\n        hasFakeCaret = slot.hasFakeCaret;\n      }\n      \n      if (\"isActive\" in slot && typeof slot.isActive === \"boolean\") {\n        isActive = slot.isActive;\n      }\n    }\n  }\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...otherProps}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\n/**\n * Input OTP separator component\n */\nconst InputOTPSeparator = React.forwardRef(function InputOTPSeparator(props, ref) {\n  // Extract props safely\n  const safeProps = {};\n  if (props && typeof props === \"object\") {\n    Object.keys(props).forEach(key => {\n      safeProps[key] = props[key];\n    });\n  }\n  \n  return (\n    <div ref={ref} role=\"separator\" {...safeProps}>\n      <Dot />\n    </div>\n  )\n})\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\n/**\n *\n */\nexport {\n  InputOTP,\n  InputOTPGroup,\n  InputOTPSlot,\n  InputOTPSeparator\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/components/ui/input.jsx","messages":[{"ruleId":"jsdoc/require-returns","severity":1,"message":"Missing JSDoc @returns declaration.","line":17,"column":3,"nodeType":"Block","endLine":20,"endColumn":6}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\n\nimport { cn } from \"../../lib/utils\"\n\n/**\n * Input component props\n * @typedef {object} InputProps\n * @property {string} [className] - Additional class names\n * @property {string} [type=\"text\"] - Input type (text, password, email, etc.)\n */\n\n/**\n * Input component for text input fields\n * @type {React.ForwardRefExoticComponent<React.InputHTMLAttributes<HTMLInputElement> & React.RefAttributes<HTMLInputElement>>}\n */\nconst Input = React.forwardRef(\n  /**\n   * @param {React.InputHTMLAttributes<HTMLInputElement>} props\n   * @param {React.ForwardedRef<HTMLInputElement>} ref\n   */\n  (props, ref) => {\n    // Create safe props object with type checking\n    const safeProps = props || {};\n    \n    // Extract type with proper default value\n    let type = \"text\";\n    if (typeof safeProps === 'object' && safeProps !== null && 'type' in safeProps) {\n      if (typeof safeProps.type === 'string') {\n        type = safeProps.type;\n      }\n    }\n    \n    // Extract className with proper type checking\n    let className;\n    if (typeof safeProps === 'object' && safeProps !== null && 'className' in safeProps) {\n      if (typeof safeProps.className === 'string') {\n        className = safeProps.className;\n      }\n    }\n    \n    // Extract remaining props\n    const rest = {};\n    if (typeof safeProps === 'object' && safeProps !== null) {\n      Object.keys(safeProps).forEach(key => {\n        if (!['type', 'className'].includes(key)) {\n          rest[key] = safeProps[key];\n        }\n      });\n    }\n    \n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...rest}\n      />\n    );\n  }\n)\n\nInput.displayName = \"Input\"\n\n/**\n * Export Input component\n * @module Input\n */\nexport { Input }","usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/components/ui/label.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/components/ui/menubar.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'MenubarPrimitive' is defined but never used. Allowed unused vars must match /React|Switch|Route|Redirect|Router|QueryClientProvider|AuthProvider|ProtectedRoute|ChatPage|ChevronRight|MoreHorizontal|ChevronDown|ChevronUp|Search|CheckIcon|ChevronsUpDown|Circle|X|Plus|Minus|Slot|Check|Button|Input|MessageBubble|SocialLoginButton|FcGoogle|FaMicrosoft|FaApple|OTPInput|OTPInputContext|Dot|Dialog|DialogContent|Label|LabelPrimitive|Controller|DayPicker|ChevronLeft|ArrowLeft|ArrowRight|Link|GripVertical|PanelLeft|Separator|Sheet|SheetContent|SheetDescription|SheetHeader|SheetTitle|SheetTrigger|Toast|ToastClose|ToastDescription|ToastProvider|ToastTitle|ToastViewport|App|Skeleton|Tooltip|TooltipContent|TooltipProvider|TooltipTrigger|Comp/u.","line":4,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"MenubarPrimitive"},"fix":{"range":[54,81],"text":""},"desc":"Remove unused variable 'MenubarPrimitive'."}]},{"ruleId":"jsdoc/require-returns","severity":1,"message":"Missing JSDoc @returns declaration.","line":22,"column":1,"nodeType":"Block","endLine":25,"endColumn":4},{"ruleId":"jsdoc/require-returns","severity":1,"message":"Missing JSDoc @returns declaration.","line":29,"column":1,"nodeType":"Block","endLine":32,"endColumn":4},{"ruleId":"jsdoc/require-returns","severity":1,"message":"Missing JSDoc @returns declaration.","line":36,"column":1,"nodeType":"Block","endLine":39,"endColumn":4},{"ruleId":"jsdoc/require-returns","severity":1,"message":"Missing JSDoc @returns declaration.","line":43,"column":1,"nodeType":"Block","endLine":46,"endColumn":4},{"ruleId":"jsdoc/require-returns","severity":1,"message":"Missing JSDoc @returns declaration.","line":50,"column":1,"nodeType":"Block","endLine":53,"endColumn":4},{"ruleId":"jsdoc/require-returns","severity":1,"message":"Missing JSDoc @returns declaration.","line":140,"column":3,"nodeType":"Block","endLine":143,"endColumn":6},{"ruleId":"jsdoc/require-returns","severity":1,"message":"Missing JSDoc @returns declaration.","line":282,"column":1,"nodeType":"Block","endLine":285,"endColumn":4}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport * as React from \"react\";\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\";\nimport { Check, ChevronRight, Circle } from \"lucide-react\";\nimport { cn } from \"../../lib/utils.js\";\n\n// Utility typedef for common props\n/**\n * @typedef {object} BaseProps\n * @property {string} [className]\n * @property {boolean} [inset]\n * @property {React.ReactNode} [children]\n * @property {string} [value]\n * @property {string} [align]\n * @property {number} [alignOffset]\n * @property {number} [sideOffset]\n * @property {boolean} [checked]\n */\n\n// Short component wrappers\n/**\n *\n * @param props\n */\nexport function MenubarMenu(/** @type {any} */ props) {\n  return <MenubarPrimitive.Menu {...props} />;\n}\n/**\n *\n * @param props\n */\nexport function MenubarGroup(/** @type {any} */ props) {\n  return <MenubarPrimitive.Group {...props} />;\n}\n/**\n *\n * @param props\n */\nexport function MenubarPortal(/** @type {any} */ props) {\n  return <MenubarPrimitive.Portal {...props} />;\n}\n/**\n *\n * @param props\n */\nexport function MenubarRadioGroup(/** @type {any} */ props) {\n  return <MenubarPrimitive.RadioGroup {...props} />;\n}\n/**\n *\n * @param props\n */\nexport function MenubarSub(/** @type {any} */ props) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />;\n}\n\n// Root\n/**\n *\n */\nexport const Menubar = React.forwardRef(function Menubar(/** @type {BaseProps} */ props, ref) {\n  const { className, ...rest } = props ?? {};\n  return (\n    <MenubarPrimitive.Root\n      ref={ref}\n      className={cn(\"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\", className)}\n      {...rest}\n    />\n  );\n});\nMenubar.displayName = \"Menubar\";\n\n// Trigger\n/**\n *\n */\nexport const MenubarTrigger = React.forwardRef(function MenubarTrigger(/** @type {BaseProps} */ props, ref) {\n  const { className, ...rest } = props ?? {};\n  return (\n    <MenubarPrimitive.Trigger\n      ref={ref}\n      className={cn(\"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\", className)}\n      {...rest}\n    />\n  );\n});\nMenubarTrigger.displayName = \"MenubarTrigger\";\n\n// Sub Trigger\n/**\n *\n */\nexport const MenubarSubTrigger = React.forwardRef(function MenubarSubTrigger(/** @type {BaseProps} */ props, ref) {\n  const { className, inset, children, ...rest } = props ?? {};\n  return (\n    <MenubarPrimitive.SubTrigger\n      ref={ref}\n      className={cn(\"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\", inset && \"pl-8\", className)}\n      {...rest}\n    >\n      {children}\n      <ChevronRight className=\"ml-auto h-4 w-4\" />\n    </MenubarPrimitive.SubTrigger>\n  );\n});\nMenubarSubTrigger.displayName = \"MenubarSubTrigger\";\n\n// Sub Content\n/**\n *\n */\nexport const MenubarSubContent = React.forwardRef(function MenubarSubContent(/** @type {BaseProps} */ props, ref) {\n  const { className, ...rest } = props ?? {};\n  return (\n    <MenubarPrimitive.SubContent\n      ref={ref}\n      className={cn(\"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground\", className)}\n      {...rest}\n    />\n  );\n});\nMenubarSubContent.displayName = \"MenubarSubContent\";\n\n/**\n * Extended props for MenubarContent\n * @typedef {object} MenubarContentProps\n * @property {string} [className] - Additional class names\n * @property {'start' | 'center' | 'end'} [align='start'] - Content alignment\n * @property {number} [alignOffset=-4] - Alignment offset\n * @property {number} [sideOffset=8] - Side offset\n * @property {React.ReactNode} [children] - Child elements\n */\n\n// Content\n/**\n *\n */\nexport const MenubarContent = React.forwardRef(\n  /**\n   * @param {MenubarContentProps} props - Component props\n   * @param {React.ForwardedRef<HTMLDivElement>} ref - Forwarded ref\n   */\n  function MenubarContent(props, ref) {\n    // Create safe props object with type checking\n    const safeProps = props || {};\n    \n    // Default and type-safe property extraction\n    const className = typeof safeProps.className === 'string' ? safeProps.className : undefined;\n    \n    // Handle alignment with strict typing\n    /** @type {'start' | 'center' | 'end'} */\n    const align = (safeProps.align === 'center' || safeProps.align === 'end') \n      ? safeProps.align \n      : 'start';\n    \n    // Handle numeric offsets with validation\n    const alignOffset = typeof safeProps.alignOffset === 'number' ? safeProps.alignOffset : -4;\n    const sideOffset = typeof safeProps.sideOffset === 'number' ? safeProps.sideOffset : 8;\n    \n    // Extract remaining props safely\n    const otherProps = {};\n    Object.keys(safeProps).forEach(key => {\n      if (!['className', 'align', 'alignOffset', 'sideOffset'].includes(key)) {\n        otherProps[key] = safeProps[key];\n      }\n    });\n    \n    return (\n      <MenubarPrimitive.Portal>\n        <MenubarPrimitive.Content\n          ref={ref}\n          align={align}\n          alignOffset={alignOffset}\n          sideOffset={sideOffset}\n          className={cn(\"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md\", className)}\n          {...otherProps}\n        />\n      </MenubarPrimitive.Portal>\n    );\n  }\n);\nMenubarContent.displayName = \"MenubarContent\";\n\n// Item\n/**\n *\n */\nexport const MenubarItem = React.forwardRef(function MenubarItem(/** @type {BaseProps} */ props, ref) {\n  const { className, inset, ...rest } = props ?? {};\n  return (\n    <MenubarPrimitive.Item\n      ref={ref}\n      className={cn(\"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground\", inset && \"pl-8\", className)}\n      {...rest}\n    />\n  );\n});\nMenubarItem.displayName = \"MenubarItem\";\n\n// Checkbox Item\n/**\n *\n */\nexport const MenubarCheckboxItem = React.forwardRef(function MenubarCheckboxItem(/** @type {BaseProps} */ props, ref) {\n  const { className, children, checked, ...rest } = props ?? {};\n  return (\n    <MenubarPrimitive.CheckboxItem\n      ref={ref}\n      checked={checked}\n      className={cn(\"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none\", className)}\n      {...rest}\n    >\n      <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n        <MenubarPrimitive.ItemIndicator>\n          <Check className=\"h-4 w-4\" />\n        </MenubarPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </MenubarPrimitive.CheckboxItem>\n  );\n});\nMenubarCheckboxItem.displayName = \"MenubarCheckboxItem\";\n\n// Radio Item\n/**\n *\n */\nexport const MenubarRadioItem = React.forwardRef(function MenubarRadioItem(/** @type {BaseProps} */ props, ref) {\n  const { className, children, value, ...rest } = props ?? {};\n  return (\n    <MenubarPrimitive.RadioItem\n      ref={ref}\n      value={value}\n      className={cn(\"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none\", className)}\n      {...rest}\n    >\n      <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n        <MenubarPrimitive.ItemIndicator>\n          <Circle className=\"h-2 w-2 fill-current\" />\n        </MenubarPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </MenubarPrimitive.RadioItem>\n  );\n});\nMenubarRadioItem.displayName = \"MenubarRadioItem\";\n\n// Label\n/**\n *\n */\nexport const MenubarLabel = React.forwardRef(function MenubarLabel(/** @type {BaseProps} */ props, ref) {\n  const { className, inset, ...rest } = props ?? {};\n  return (\n    <MenubarPrimitive.Label\n      ref={ref}\n      className={cn(\"px-2 py-1.5 text-sm font-semibold\", inset && \"pl-8\", className)}\n      {...rest}\n    />\n  );\n});\nMenubarLabel.displayName = \"MenubarLabel\";\n\n// Separator\n/**\n *\n */\nexport const MenubarSeparator = React.forwardRef(function MenubarSeparator(/** @type {BaseProps} */ props, ref) {\n  const { className, ...rest } = props ?? {};\n  return (\n    <MenubarPrimitive.Separator\n      ref={ref}\n      className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n      {...rest}\n    />\n  );\n});\nMenubarSeparator.displayName = \"MenubarSeparator\";\n\n// Shortcut\n/**\n *\n * @param props\n */\nexport function MenubarShortcut(/** @type {BaseProps} */ props) {\n  const { className, ...rest } = props ?? {};\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest text-muted-foreground\", className)}\n      {...rest}\n    />\n  );\n}\nMenubarShortcut.displayName = \"MenubarShortcut\";\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/components/ui/navigation-menu.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/components/ui/pagination.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'isBoolean' is defined but never used. Allowed unused vars must match /React|Switch|Route|Redirect|Router|QueryClientProvider|AuthProvider|ProtectedRoute|ChatPage|ChevronRight|MoreHorizontal|ChevronDown|ChevronUp|Search|CheckIcon|ChevronsUpDown|Circle|X|Plus|Minus|Slot|Check|Button|Input|MessageBubble|SocialLoginButton|FcGoogle|FaMicrosoft|FaApple|OTPInput|OTPInputContext|Dot|Dialog|DialogContent|Label|LabelPrimitive|Controller|DayPicker|ChevronLeft|ArrowLeft|ArrowRight|Link|GripVertical|PanelLeft|Separator|Sheet|SheetContent|SheetDescription|SheetHeader|SheetTitle|SheetTrigger|Toast|ToastClose|ToastDescription|ToastProvider|ToastTitle|ToastViewport|App|Skeleton|Tooltip|TooltipContent|TooltipProvider|TooltipTrigger|Comp/u.","line":33,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"isBoolean"},"fix":{"range":[915,981],"text":""},"desc":"Remove unused variable 'isBoolean'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\nimport { buttonVariants } from \"./button\"\n\n/**\n * Safely check if a property exists on an object with type guards\n * @param {any} obj - The object to check\n * @param {string} prop - The property name to check for\n * @returns {boolean} Whether the property exists on the object\n */\nfunction hasProp(obj, prop) {\n  return obj !== null && \n         typeof obj === 'object' && \n         Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\n/**\n * Type guard for string values\n * @param {any} value - The value to check\n * @returns {boolean} Whether the value is a string\n */\nfunction isString(value) {\n  return typeof value === 'string';\n}\n\n/**\n * Type guard for boolean values\n * @param {any} value - The value to check\n * @returns {boolean} Whether the value is a boolean\n */\nfunction isBoolean(value) {\n  return typeof value === 'boolean';\n}\n\n/**\n * Extract and safely provide component props with type checking\n * @param {object | null | undefined} props - Raw component props\n * @param {string[]} excludeList - List of prop names to exclude from otherProps\n * @returns {{className: string, otherProps: object}} An object containing processed props\n */\nfunction extractSafeProps(props, excludeList = []) {\n  // Initialize with default empty values\n  const result = {\n    className: \"\",\n    otherProps: {}\n  };\n  \n  // Early return if props is not a valid object\n  if (props === null || typeof props !== 'object') {\n    return result;\n  }\n  \n  // Type-safe extraction of className\n  if (hasProp(props, 'className') && isString(props.className)) {\n    result.className = props.className;\n  }\n  \n  // Add all non-excluded properties to otherProps\n  Object.keys(props).forEach(key => {\n    if (!excludeList.includes(key) && key !== 'className') {\n      result.otherProps[key] = props[key];\n    }\n  });\n  \n  return result;\n}\n\n/**\n * @typedef {object} PaginationProps\n * @property {string} [className] - Additional class names to apply to the component\n * @property {React.ReactNode} [children] - Child elements to render inside the component\n */\n\n/**\n * Pagination component\n * @param {PaginationProps} props - Component props\n * @returns {JSX.Element} Pagination component\n */\nconst Pagination = (props) => {\n  // Use our utility function to safely extract props\n  const { className, otherProps } = extractSafeProps(props);\n  \n  return (\n    <nav\n      role=\"navigation\"\n      aria-label=\"pagination\"\n      className={cn(\"mx-auto flex w-full justify-center\", className)}\n      {...otherProps}\n    />\n  );\n};\n\nPagination.displayName = \"Pagination\";\n\n/**\n * @typedef {object} PaginationContentProps\n * @property {string} [className] - Additional class names to apply to the component\n * @property {React.ReactNode} [children] - Child elements to render inside the component\n */\n\n/**\n * Pagination content component\n * @param {PaginationContentProps} props - Component props\n * @param {React.Ref<HTMLUListElement>} ref - Forwarded ref\n * @returns {JSX.Element} Pagination content component\n */\nconst PaginationContent = React.forwardRef((props, ref) => {\n  // Use our utility function to safely extract props\n  const { className, otherProps } = extractSafeProps(props);\n  \n  return (\n    <ul\n      ref={ref}\n      className={cn(\"flex flex-row items-center gap-1\", className)}\n      {...otherProps}\n    />\n  );\n});\n\nPaginationContent.displayName = \"PaginationContent\";\n\n/**\n * @typedef {object} PaginationItemProps\n * @property {string} [className] - Additional class names to apply to the component\n * @property {React.ReactNode} [children] - Child elements to render inside the component\n */\n\n/**\n * Pagination item component\n * @param {PaginationItemProps} props - Component props\n * @param {React.Ref<HTMLLIElement>} ref - Forwarded ref\n * @returns {JSX.Element} Pagination item component\n */\nconst PaginationItem = React.forwardRef((props, ref) => {\n  // Use our utility function to safely extract props\n  const { className, otherProps } = extractSafeProps(props);\n  \n  return (\n    <li ref={ref} className={cn(\"\", className)} {...otherProps} />\n  );\n});\n\nPaginationItem.displayName = \"PaginationItem\";\n\n/**\n * @typedef {object} PaginationLinkProps\n * @property {string} [className] - Additional class names to apply to the component\n * @property {boolean} [isActive] - Whether this link represents the current page\n * @property {string} [size] - Size of the link, corresponds to button size variants\n * @property {React.ReactNode} [children] - Child elements to render inside the component\n */\n\n/**\n * Pagination link component with proper TypeScript support\n * @param {PaginationLinkProps} props - Component props\n * @param {React.Ref<HTMLAnchorElement>} ref - Reference to the underlying DOM element\n * @returns {JSX.Element} Pagination link component\n */\nconst PaginationLink = React.forwardRef((props, ref) => {\n  // Initialize with safe default values\n  let className = \"\";\n  let isActive = false; \n  let size = \"icon\";\n  let children = null;\n  const otherProps = {};\n  \n  // Use a better approach with Object.entries to avoid TypeScript errors\n  if (props) {\n    // Use `Object.entries` to get type-safe key-value pairs\n    const safeProps = /** @type {Record<string, any>} */ (props);\n    \n    // Extract known properties more safely\n    if (typeof safeProps.className === 'string') {\n      className = safeProps.className;\n    }\n    \n    if (typeof safeProps.isActive === 'boolean') {\n      isActive = safeProps.isActive;\n    }\n    \n    if (typeof safeProps.size === 'string') {\n      size = safeProps.size;\n    }\n    \n    if ('children' in safeProps) {\n      // Cast children to ReactNode to satisfy TypeScript\n      children = /** @type {import('react').ReactNode} */ (safeProps.children);\n    }\n    \n    // Extract remaining props\n    Object.keys(safeProps).forEach(key => {\n      if (!['className', 'isActive', 'size', 'children'].includes(key)) {\n        otherProps[key] = safeProps[key];\n      }\n    });\n  }\n  \n  // Validate that size is one of the allowed values\n  const validButtonSizes = [\"default\", \"sm\", \"lg\", \"icon\"];\n  const validSize = validButtonSizes.includes(size) ? size : \"icon\";\n  \n  // Cast the size to a type-safe value for buttonVariants\n  // This ensures TypeScript knows it's receiving a valid size value\n  const typedSize = /** @type {(\"default\"|\"sm\"|\"lg\"|\"icon\")} */ (validSize);\n  \n  return (\n    <a\n      ref={ref}\n      aria-current={isActive ? \"page\" : undefined}\n      className={cn(\n        buttonVariants({\n          variant: isActive ? \"outline\" : \"ghost\",\n          size: typedSize,\n        }),\n        className\n      )}\n      {...otherProps}\n    >\n      {children}\n    </a>\n  );\n});\n\nPaginationLink.displayName = \"PaginationLink\";\n\n/**\n * @typedef {object} PaginationPreviousProps\n * @property {string} [className] - Additional class names to apply to the component\n * @property {React.ReactNode} [children] - Child elements to render inside the component\n */\n\n/**\n * Pagination previous component\n * @param {PaginationPreviousProps} props - Component props\n * @param {React.Ref<HTMLAnchorElement>} ref - Reference to the underlying DOM element\n * @returns {JSX.Element} Pagination previous component\n */\nconst PaginationPrevious = React.forwardRef((props, ref) => {\n  // Use our utility function to safely extract props\n  const { className, otherProps } = extractSafeProps(props);\n  \n  return (\n    <PaginationLink\n      ref={ref}\n      aria-label=\"Go to previous page\"\n      size=\"default\"\n      className={cn(\"gap-1 pl-2.5\", className)}\n      {...otherProps}\n    >\n      <ChevronLeft className=\"h-4 w-4\" />\n      <span>Previous</span>\n    </PaginationLink>\n  );\n});\n\nPaginationPrevious.displayName = \"PaginationPrevious\";\n\n/**\n * @typedef {object} PaginationNextProps\n * @property {string} [className] - Additional class names to apply to the component\n * @property {React.ReactNode} [children] - Child elements to render inside the component\n */\n\n/**\n * Pagination next component\n * @param {PaginationNextProps} props - Component props\n * @param {React.Ref<HTMLAnchorElement>} ref - Reference to the underlying DOM element\n * @returns {JSX.Element} Pagination next component\n */\nconst PaginationNext = React.forwardRef((props, ref) => {\n  // Use our utility function to safely extract props\n  const { className, otherProps } = extractSafeProps(props);\n  \n  return (\n    <PaginationLink\n      ref={ref}\n      aria-label=\"Go to next page\"\n      size=\"default\"\n      className={cn(\"gap-1 pr-2.5\", className)}\n      {...otherProps}\n    >\n      <span>Next</span>\n      <ChevronRight className=\"h-4 w-4\" />\n    </PaginationLink>\n  );\n});\n\nPaginationNext.displayName = \"PaginationNext\";\n\n/**\n * @typedef {object} PaginationEllipsisProps\n * @property {string} [className] - Additional class names to apply to the component\n */\n\n/**\n * Pagination ellipsis component\n * @param {PaginationEllipsisProps} props - Component props\n * @param {React.Ref<HTMLSpanElement>} ref - Reference to the underlying DOM element\n * @returns {JSX.Element} Pagination ellipsis component\n */\nconst PaginationEllipsis = React.forwardRef((props, ref) => {\n  // Use our utility function to safely extract props\n  const { className, otherProps } = extractSafeProps(props);\n  \n  return (\n    <span\n      ref={ref}\n      aria-hidden\n      className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n      {...otherProps}\n    >\n      <MoreHorizontal className=\"h-4 w-4\" />\n      <span className=\"sr-only\">More pages</span>\n    </span>\n  );\n});\n\nPaginationEllipsis.displayName = \"PaginationEllipsis\";\n\n/**\n *\n */\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}","usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/components/ui/popover.jsx","messages":[{"ruleId":"jsdoc/require-returns","severity":1,"message":"Missing JSDoc @returns declaration.","line":21,"column":3,"nodeType":"Block","endLine":24,"endColumn":6}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"../../lib/utils\"\n\n/**\n * Popover root component\n */\nconst Popover = PopoverPrimitive.Root\n\n/**\n * Popover trigger component\n */\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\n/**\n * Popover content component\n * @type {React.ForwardRefExoticComponent<React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content> & React.RefAttributes<React.ElementRef<typeof PopoverPrimitive.Content>>>}\n */\nconst PopoverContent = React.forwardRef(\n  /**\n   * @param {React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>} props\n   * @param {React.ForwardedRef<React.ElementRef<typeof PopoverPrimitive.Content>>} ref\n   */\n  (props, ref) => {\n    // Create safe props object\n    const safeProps = props || {};\n    \n    // Extract properties safely with type checking\n    const className = typeof safeProps.className === 'string' ? safeProps.className : undefined;\n    \n    // Default align to \"center\" if not provided or invalid\n    /** @type {'center' | 'start' | 'end'} */\n    const align = safeProps.align === 'start' || safeProps.align === 'end' \n      ? safeProps.align \n      : 'center';\n    \n    // Default sideOffset to 4 if not provided or invalid\n    const sideOffset = typeof safeProps.sideOffset === 'number' ? safeProps.sideOffset : 4;\n    \n    // Extract remaining props\n    const otherProps = {};\n    if (typeof safeProps === 'object') {\n      Object.keys(safeProps).forEach(key => {\n        if (!['className', 'align', 'sideOffset'].includes(key)) {\n          otherProps[key] = safeProps[key];\n        }\n      });\n    }\n    \n    return (\n      <PopoverPrimitive.Portal>\n        <PopoverPrimitive.Content\n          ref={ref}\n          align={align}\n          sideOffset={sideOffset}\n          className={cn(\n            \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n            className\n          )}\n          {...otherProps}\n        />\n      </PopoverPrimitive.Portal>\n    );\n  }\n)\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\n/**\n * Export Popover components\n * @module Popover\n */\nexport { Popover, PopoverTrigger, PopoverContent }","usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/components/ui/progress.jsx","messages":[{"ruleId":"jsdoc/require-returns","severity":1,"message":"Missing JSDoc @returns declaration.","line":20,"column":3,"nodeType":"Block","endLine":23,"endColumn":6}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"../../lib/utils\"\n\n/**\n * Progress component props\n * @typedef {object} ProgressProps\n * @property {string} [className] - Additional class names\n * @property {number} [value] - Current progress value (0-100)\n */\n\n/**\n * Progress component for displaying progress bars\n * @type {React.ForwardRefExoticComponent<React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root> & {value?: number} & React.RefAttributes<React.ElementRef<typeof ProgressPrimitive.Root>>>}\n */\nconst Progress = React.forwardRef(\n  /**\n   * @param {React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root> & {value?: number}} props\n   * @param {React.ForwardedRef<React.ElementRef<typeof ProgressPrimitive.Root>>} ref\n   */\n  (props, ref) => {\n    // Create safe props object with type checking\n    const safeProps = props || {};\n    \n    // Extract className with proper type checking using bracket notation\n    let className;\n    if (typeof safeProps === 'object' && safeProps !== null) {\n      const classNameValue = safeProps['className'];\n      if (typeof classNameValue === 'string') {\n        className = classNameValue;\n      }\n    }\n    \n    // Extract value with proper default and type checking using bracket notation\n    let value = 0;\n    if (typeof safeProps === 'object' && safeProps !== null) {\n      const rawValue = safeProps['value'];\n      if (typeof rawValue === 'number' && !isNaN(rawValue)) {\n        value = rawValue;\n      }\n    }\n    \n    // Extract remaining props with a type-safe approach\n    /** @type {Record<string, any>} */\n    const rest = {};\n    if (typeof safeProps === 'object' && safeProps !== null) {\n      // Use a for loop instead of Object.keys().forEach for better type safety\n      const keys = Object.keys(safeProps);\n      for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        if (key !== 'className' && key !== 'value') {\n          rest[key] = safeProps[key];\n        }\n      }\n    }\n    \n    return (\n      <ProgressPrimitive.Root\n        ref={ref}\n        className={cn(\n          \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n          className\n        )}\n        {...rest}\n      >\n        <ProgressPrimitive.Indicator\n          className=\"h-full w-full flex-1 bg-primary transition-all\"\n          style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n        />\n      </ProgressPrimitive.Root>\n    );\n  }\n)\nProgress.displayName = ProgressPrimitive.Root.displayName\n\n/**\n * Export Progress component\n * @module Progress\n */\nexport { Progress }","usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/components/ui/radio-group.jsx","messages":[{"ruleId":"jsdoc/require-returns","severity":1,"message":"Missing JSDoc @returns declaration.","line":12,"column":3,"nodeType":"Block","endLine":15,"endColumn":6},{"ruleId":"jsdoc/require-returns","severity":1,"message":"Missing JSDoc @returns declaration.","line":33,"column":3,"nodeType":"Block","endLine":36,"endColumn":6}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\n\n/**\n * A simplified Radio Group component using Radix UI primitives\n */\n\nconst RadioGroup = React.forwardRef(\n  /** \n   * @param {import(\"react\").ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>} props \n   * @param {import(\"react\").Ref<React.ElementRef<typeof RadioGroupPrimitive.Root>>} ref \n   */\n  (props, ref) => {\n    // Safely extract and use props with defaults\n    const { className, ...restProps } = props || {}\n    \n    return (\n      <RadioGroupPrimitive.Root\n        className={cn(\"grid gap-2\", className)}\n        ref={ref}\n        {...restProps}\n      />\n    )\n  }\n)\n\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef(\n  /**\n   * @param {import(\"react\").ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>} props\n   * @param {import(\"react\").Ref<React.ElementRef<typeof RadioGroupPrimitive.Item>>} ref\n   */\n  (props, ref) => {\n    // Safely extract and use props with defaults\n    const { className, value = \"\", ...restProps } = props || {}\n    \n    return (\n      <RadioGroupPrimitive.Item\n        ref={ref}\n        value={value}\n        className={cn(\n          \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        {...restProps}\n      >\n        <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n          <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n        </RadioGroupPrimitive.Indicator>\n      </RadioGroupPrimitive.Item>\n    )\n  }\n)\n\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\n/**\n *\n */\nexport { RadioGroup, RadioGroupItem }","usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/components/ui/resizable.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/components/ui/scroll-area.jsx","messages":[{"ruleId":"jsdoc/require-returns","severity":1,"message":"Missing JSDoc @returns declaration.","line":11,"column":3,"nodeType":"Block","endLine":14,"endColumn":6},{"ruleId":"jsdoc/require-returns","severity":1,"message":"Missing JSDoc @returns declaration.","line":38,"column":3,"nodeType":"Block","endLine":41,"endColumn":6}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"../../lib/utils\"\n\n/**\n * A simpler approach to ScrollArea using proper typing patterns\n */\n\nconst ScrollArea = React.forwardRef(\n  /**\n   * @param {React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>} props\n   * @param {React.ForwardedRef<React.ElementRef<typeof ScrollAreaPrimitive.Root>>} ref\n   */\n  (props, ref) => {\n    // Extract props safely\n    const { className, children, ...otherProps } = props || {};\n    \n    return (\n      <ScrollAreaPrimitive.Root\n        ref={ref}\n        className={cn(\"relative overflow-hidden\", className)}\n        {...otherProps}\n      >\n        <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n          {children}\n        </ScrollAreaPrimitive.Viewport>\n        <ScrollBar />\n        <ScrollAreaPrimitive.Corner />\n      </ScrollAreaPrimitive.Root>\n    );\n  }\n);\n\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName;\n\nconst ScrollBar = React.forwardRef(\n  /**\n   * @param {React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>} props\n   * @param {React.ForwardedRef<React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>>} ref\n   */\n  (props, ref) => {\n    // Extract props safely with defaults\n    const safeProps = props || {};\n    \n    // Use type-safe property extraction\n    const className = typeof safeProps.className === 'string' ? safeProps.className : undefined;\n    \n    // Ensure orientation is one of the valid values\n    /** @type {'vertical'|'horizontal'} */\n    const orientation = safeProps.orientation === 'horizontal' ? 'horizontal' : 'vertical';\n    \n    // Create a clean props object without className and orientation\n    const otherProps = {};\n    if (typeof safeProps === 'object') {\n      Object.keys(safeProps).forEach(key => {\n        if (!['className', 'orientation', 'ref'].includes(key)) {\n          otherProps[key] = safeProps[key];\n        }\n      });\n    }\n    \n    return (\n      <ScrollAreaPrimitive.ScrollAreaScrollbar\n        ref={ref}\n        orientation={orientation}\n        className={cn(\n          \"flex touch-none select-none transition-colors\",\n          orientation === \"vertical\" &&\n            \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n          orientation === \"horizontal\" &&\n            \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n          className\n        )}\n        {...otherProps}\n      >\n        <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n      </ScrollAreaPrimitive.ScrollAreaScrollbar>\n    );\n  }\n);\n\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName;\n\n/**\n * Export ScrollArea components\n */\nexport { ScrollArea, ScrollBar };","usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/components/ui/select.jsx","messages":[{"ruleId":"jsdoc/require-returns","severity":1,"message":"Missing JSDoc @returns declaration.","line":14,"column":3,"nodeType":"Block","endLine":17,"endColumn":6},{"ruleId":"jsdoc/require-returns","severity":1,"message":"Missing JSDoc @returns declaration.","line":39,"column":3,"nodeType":"Block","endLine":42,"endColumn":6},{"ruleId":"jsdoc/require-returns","severity":1,"message":"Missing JSDoc @returns declaration.","line":58,"column":3,"nodeType":"Block","endLine":61,"endColumn":6},{"ruleId":"jsdoc/require-returns","severity":1,"message":"Missing JSDoc @returns declaration.","line":133,"column":3,"nodeType":"Block","endLine":136,"endColumn":6},{"ruleId":"jsdoc/require-returns","severity":1,"message":"Missing JSDoc @returns declaration.","line":152,"column":3,"nodeType":"Block","endLine":155,"endColumn":6},{"ruleId":"jsdoc/require-returns","severity":1,"message":"Missing JSDoc @returns declaration.","line":180,"column":3,"nodeType":"Block","endLine":183,"endColumn":6}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\nimport { cn } from \"../../lib/utils\"\n\nconst Select = SelectPrimitive.Root\nconst SelectGroup = SelectPrimitive.Group\nconst SelectValue = SelectPrimitive.Value\n\n/** @type {React.ForwardRefExoticComponent<React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger> & React.RefAttributes<HTMLButtonElement>>} */\nconst SelectTrigger = React.forwardRef(\n  /**\n   * @param {{ className?: string; children?: React.ReactNode }} props\n   * @param {React.ForwardedRef<HTMLButtonElement>} ref\n   */\n  function SelectTrigger({ className, children, ...props }, ref) {\n    return (\n      <SelectPrimitive.Trigger\n        ref={ref}\n        className={cn(\n          \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        <SelectPrimitive.Icon asChild>\n          <ChevronDown className=\"h-4 w-4 opacity-50\" />\n        </SelectPrimitive.Icon>\n      </SelectPrimitive.Trigger>\n    )\n  }\n)\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef(\n  /**\n   * @param {{ className?: string }} props @param {React.ForwardedRef<HTMLDivElement>} ref\n   * @param ref\n   */\n  function SelectScrollUpButton({ className, ...props }, ref) {\n    return (\n      <SelectPrimitive.ScrollUpButton\n        ref={ref}\n        className={cn(\"flex cursor-default items-center justify-center py-1\", className)}\n        {...props}\n      >\n        <ChevronUp className=\"h-4 w-4\" />\n      </SelectPrimitive.ScrollUpButton>\n    )\n  }\n)\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef(\n  /**\n   * @param {{ className?: string }} props @param {React.ForwardedRef<HTMLDivElement>} ref\n   * @param ref\n   */\n  function SelectScrollDownButton({ className, ...props }, ref) {\n    return (\n      <SelectPrimitive.ScrollDownButton\n        ref={ref}\n        className={cn(\"flex cursor-default items-center justify-center py-1\", className)}\n        {...props}\n      >\n        <ChevronDown className=\"h-4 w-4\" />\n      </SelectPrimitive.ScrollDownButton>\n    )\n  }\n)\nSelectScrollDownButton.displayName = SelectPrimitive.ScrollDownButton.displayName\n\n/**\n * @typedef {'item-aligned' | 'popper'} SelectPosition\n */\n\n/**\n * @typedef {object} SelectContentProps\n * @property {string} [className] - Additional CSS class names\n * @property {React.ReactNode} [children] - Child elements\n * @property {SelectPosition} [position='popper'] - Content position strategy\n */\n\nconst SelectContent = React.forwardRef(\n  /**\n   * @param {object} props - Component properties\n   * @param {string} [props.className] - Additional CSS class names\n   * @param {React.ReactNode} [props.children] - Child elements\n   * @param {SelectPosition} [props.position='popper'] - Content position strategy\n   * @param {React.ForwardedRef<HTMLDivElement>} ref - Forwarded reference\n   * @returns {JSX.Element} - Rendered component\n   */\n  function SelectContent({ className, children, position = \"popper\", ...otherProps }, ref) {\n    // Ensure position is one of the valid values\n    /** @type {SelectPosition} */\n    const validPosition = position === \"item-aligned\" ? \"item-aligned\" : \"popper\";\n    \n    return (\n      <SelectPrimitive.Portal>\n        <SelectPrimitive.Content\n          ref={ref}\n          className={cn(\n            \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n            validPosition === \"popper\" &&\n              \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n            className\n          )}\n          position={validPosition}\n          {...otherProps}\n        >\n          <SelectScrollUpButton />\n          <SelectPrimitive.Viewport\n            className={cn(\n              \"p-1\",\n              validPosition === \"popper\" &&\n                \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n            )}\n          >\n            {children}\n          </SelectPrimitive.Viewport>\n          <SelectScrollDownButton />\n        </SelectPrimitive.Content>\n      </SelectPrimitive.Portal>\n    )\n  }\n)\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef(\n  /**\n   * @param {{ className?: string; children?: React.ReactNode }} props @param {React.ForwardedRef<HTMLDivElement>} ref\n   * @param ref\n   */\n  function SelectLabel({ className, children, ...props }, ref) {\n    return (\n      <SelectPrimitive.Label\n        ref={ref}\n        className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n        {...props}\n      >\n        {children}\n      </SelectPrimitive.Label>\n    )\n  }\n)\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef(\n  /**\n   * @param {{ className?: string; children: React.ReactNode; value: string }} props @param {React.ForwardedRef<HTMLDivElement>} ref\n   * @param ref\n   */\n  function SelectItem({ className, children, value, ...props }, ref) {\n    return (\n      <SelectPrimitive.Item\n        ref={ref}\n        value={value}\n        className={cn(\n          \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n          className\n        )}\n        {...props}\n      >\n        <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n          <SelectPrimitive.ItemIndicator>\n            <Check className=\"h-4 w-4\" />\n          </SelectPrimitive.ItemIndicator>\n        </span>\n        <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n      </SelectPrimitive.Item>\n    )\n  }\n)\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef(\n  /**\n   * @param {{ className?: string }} props @param {React.ForwardedRef<HTMLDivElement>} ref\n   * @param ref\n   */\n  function SelectSeparator({ className, ...props }, ref) {\n    return (\n      <SelectPrimitive.Separator\n        ref={ref}\n        className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n        {...props}\n      />\n    )\n  }\n)\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\n/**\n *\n */\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/components/ui/separator.jsx","messages":[{"ruleId":"jsdoc/require-returns","severity":1,"message":"Missing JSDoc @returns declaration.","line":19,"column":3,"nodeType":"Block","endLine":22,"endColumn":6}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"../../lib/utils\"\n\n/**\n * Separator component props\n * @typedef {object} SeparatorProps\n * @property {string} [className] - Additional class names\n * @property {\"horizontal\"|\"vertical\"} [orientation=\"horizontal\"] - Separator orientation\n * @property {boolean} [decorative=true] - Whether the separator is decorative\n */\n\n/**\n * Separator component for visual division between elements\n * @type {React.ForwardRefExoticComponent<React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root> & React.RefAttributes<React.ElementRef<typeof SeparatorPrimitive.Root>>>}\n */\nconst Separator = React.forwardRef(\n  /**\n   * @param {React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>} props\n   * @param {React.ForwardedRef<React.ElementRef<typeof SeparatorPrimitive.Root>>} ref\n   */\n  (props, ref) => {\n    // Extract props safely with defaults\n    const safeProps = props || {};\n    \n    // Extract properties with proper type checking using bracket notation\n    let className;\n    if (typeof safeProps === 'object' && safeProps !== null && 'className' in safeProps) {\n      const classNameValue = safeProps['className'];\n      if (typeof classNameValue === 'string') {\n        className = classNameValue;\n      }\n    }\n    \n    // Handle orientation with strong typing\n    /** @type {\"horizontal\"|\"vertical\"} */\n    let orientation = 'horizontal'; // Default value\n    if (\n      typeof safeProps === 'object' && \n      safeProps !== null && \n      'orientation' in safeProps && \n      safeProps['orientation'] === 'vertical'\n    ) {\n      orientation = 'vertical';\n    }\n    \n    // Handle decorative prop with proper default\n    let decorative = true; // Default value\n    if (\n      typeof safeProps === 'object' && \n      safeProps !== null && \n      'decorative' in safeProps && \n      safeProps['decorative'] === false\n    ) {\n      decorative = false;\n    }\n    \n    // Create a clean props object without extracted properties\n    const otherProps = {};\n    if (typeof safeProps === 'object') {\n      Object.keys(safeProps).forEach(key => {\n        if (!['className', 'orientation', 'decorative'].includes(key)) {\n          otherProps[key] = safeProps[key];\n        }\n      });\n    }\n    \n    return (\n      <SeparatorPrimitive.Root\n        ref={ref}\n        decorative={decorative}\n        orientation={orientation}\n        className={cn(\n          \"shrink-0 bg-border\",\n          orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n          className\n        )}\n        {...otherProps}\n      />\n    );\n  }\n)\n\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\n/**\n * Export Separator component\n * @module Separator\n */\nexport { Separator }","usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/components/ui/sheet.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/components/ui/sidebar.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/components/ui/skeleton.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/components/ui/slider.jsx","messages":[{"ruleId":"jsdoc/require-returns","severity":1,"message":"Missing JSDoc @returns declaration.","line":22,"column":3,"nodeType":"Block","endLine":25,"endColumn":6}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"../../lib/utils\"\n\n/**\n * Slider component props\n * @typedef {object} SliderProps\n * @property {string} [className] - Additional class names\n * @property {number[]} [defaultValue] - Default slider values\n * @property {number} [min] - Minimum value\n * @property {number} [max] - Maximum value\n * @property {number} [step] - Step increment\n * @property {(values: number[]) => void} [onValueChange] - Value change handler\n */\n\n/**\n * Slider component for selecting numeric values\n * @type {React.ForwardRefExoticComponent<React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root> & React.RefAttributes<React.ElementRef<typeof SliderPrimitive.Root>>>}\n */\nconst Slider = React.forwardRef(\n  /**\n   * @param {React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>} props\n   * @param {React.ForwardedRef<React.ElementRef<typeof SliderPrimitive.Root>>} ref\n   */\n  (props, ref) => {\n    // Create safe props object with type checking\n    const safeProps = props || {};\n    \n    // Extract className with proper type checking\n    let className;\n    if (typeof safeProps === 'object' && safeProps !== null) {\n      const classNameValue = safeProps['className'];\n      if (typeof classNameValue === 'string') {\n        className = classNameValue;\n      }\n    }\n    \n    // Extract remaining props (excluding className which we handle explicitly)\n    const rest = {};\n    if (typeof safeProps === 'object' && safeProps !== null) {\n      Object.keys(safeProps).forEach(key => {\n        if (key !== 'className') {\n          rest[key] = safeProps[key];\n        }\n      });\n    }\n    \n    return (\n      <SliderPrimitive.Root\n        ref={ref}\n        className={cn(\n          \"relative flex w-full touch-none select-none items-center\",\n          className\n        )}\n        {...rest}\n      >\n        <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n          <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n        </SliderPrimitive.Track>\n        <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n      </SliderPrimitive.Root>\n    );\n  }\n)\nSlider.displayName = SliderPrimitive.Root.displayName\n\n/**\n * Export Slider component\n * @module Slider\n */\nexport { Slider }","usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/components/ui/switch.jsx","messages":[{"ruleId":"jsdoc/require-returns","severity":1,"message":"Missing JSDoc @returns declaration.","line":20,"column":3,"nodeType":"Block","endLine":23,"endColumn":6}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"../../lib/utils\"\n\n/**\n * Switch component props\n * @typedef {object} SwitchProps\n * @property {string} [className] - Additional class names\n * @property {boolean} [checked] - Whether the switch is checked\n * @property {boolean} [defaultChecked] - Default checked state\n * @property {(checked: boolean) => void} [onCheckedChange] - Callback when checked state changes\n */\n\n/**\n * Switch component for toggling between two states\n * @type {React.ForwardRefExoticComponent<React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root> & React.RefAttributes<React.ElementRef<typeof SwitchPrimitives.Root>>>}\n */\nconst Switch = React.forwardRef(\n  /**\n   * @param {React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>} props\n   * @param {React.ForwardedRef<React.ElementRef<typeof SwitchPrimitives.Root>>} ref\n   */\n  (props, ref) => {\n    // Create safe props object with type checking\n    const safeProps = props || {};\n    \n    // Extract className with proper type checking using bracket notation\n    let className;\n    if (typeof safeProps === 'object' && safeProps !== null) {\n      const classNameValue = safeProps['className'];\n      if (typeof classNameValue === 'string') {\n        className = classNameValue;\n      }\n    }\n    \n    // Extract remaining props (excluding className which we handle explicitly)\n    /** @type {Record<string, any>} */\n    const rest = {};\n    if (typeof safeProps === 'object' && safeProps !== null) {\n      Object.keys(safeProps).forEach(key => {\n        if (key !== 'className') {\n          rest[key] = safeProps[key];\n        }\n      });\n    }\n    \n    return (\n      <SwitchPrimitives.Root\n        className={cn(\n          \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n          className\n        )}\n        {...rest}\n        ref={ref}\n      >\n        <SwitchPrimitives.Thumb\n          className={cn(\n            \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n          )}\n        />\n      </SwitchPrimitives.Root>\n    );\n  }\n)\n\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\n/**\n * Export Switch component\n * @module Switch\n */\nexport { Switch }","usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/components/ui/table.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/components/ui/tabs.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/components/ui/textarea.jsx","messages":[{"ruleId":"jsdoc/require-returns","severity":1,"message":"Missing JSDoc @returns declaration.","line":22,"column":3,"nodeType":"Block","endLine":25,"endColumn":6}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\n\nimport { cn } from \"../../lib/utils\"\n\n/**\n * Textarea component props\n * @typedef {object} TextareaProps\n * @property {string} [className] - Additional class names\n * @property {string} [placeholder] - Placeholder text\n * @property {string} [value] - Input value\n * @property {boolean} [disabled] - Whether the textarea is disabled\n * @property {string} [id] - Element ID\n * @property {string} [name] - Form field name\n * @property {number} [rows] - Number of rows to display\n */\n\n/**\n * Textarea component for multi-line text input\n * @type {React.ForwardRefExoticComponent<React.TextareaHTMLAttributes<HTMLTextAreaElement> & React.RefAttributes<HTMLTextAreaElement>>}\n */\nconst Textarea = React.forwardRef(\n  /**\n   * @param {React.TextareaHTMLAttributes<HTMLTextAreaElement>} props\n   * @param {React.ForwardedRef<HTMLTextAreaElement>} ref\n   */\n  (props, ref) => {\n    // Create safe props object with type checking\n    const safeProps = props || {};\n    \n    // Extract className with proper type checking\n    let className;\n    if (typeof safeProps === 'object' && safeProps !== null) {\n      const classNameValue = safeProps['className'];\n      if (typeof classNameValue === 'string') {\n        className = classNameValue;\n      }\n    }\n    \n    // Extract remaining props (excluding className which we handle explicitly)\n    const rest = {};\n    if (typeof safeProps === 'object' && safeProps !== null) {\n      Object.keys(safeProps).forEach(key => {\n        if (key !== 'className') {\n          rest[key] = safeProps[key];\n        }\n      });\n    }\n    \n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...rest}\n      />\n    );\n  }\n)\n\nTextarea.displayName = \"Textarea\"\n\n/**\n * Export Textarea component\n * @module Textarea\n */\nexport { Textarea }","usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/components/ui/toast.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/components/ui/toaster.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/components/ui/toggle-group.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'type' is assigned a value but never used. Allowed unused vars must match /React|Switch|Route|Redirect|Router|QueryClientProvider|AuthProvider|ProtectedRoute|ChatPage|ChevronRight|MoreHorizontal|ChevronDown|ChevronUp|Search|CheckIcon|ChevronsUpDown|Circle|X|Plus|Minus|Slot|Check|Button|Input|MessageBubble|SocialLoginButton|FcGoogle|FaMicrosoft|FaApple|OTPInput|OTPInputContext|Dot|Dialog|DialogContent|Label|LabelPrimitive|Controller|DayPicker|ChevronLeft|ArrowLeft|ArrowRight|Link|GripVertical|PanelLeft|Separator|Sheet|SheetContent|SheetDescription|SheetHeader|SheetTitle|SheetTrigger|Toast|ToastClose|ToastDescription|ToastProvider|ToastTitle|ToastViewport|App|Skeleton|Tooltip|TooltipContent|TooltipProvider|TooltipTrigger|Comp/u.","line":88,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":88,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"type"},"fix":{"range":[2504,2514],"text":""},"desc":"Remove unused variable 'type'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'type' is assigned a value but never used. Allowed unused vars must match /React|Switch|Route|Redirect|Router|QueryClientProvider|AuthProvider|ProtectedRoute|ChatPage|ChevronRight|MoreHorizontal|ChevronDown|ChevronUp|Search|CheckIcon|ChevronsUpDown|Circle|X|Plus|Minus|Slot|Check|Button|Input|MessageBubble|SocialLoginButton|FcGoogle|FaMicrosoft|FaApple|OTPInput|OTPInputContext|Dot|Dialog|DialogContent|Label|LabelPrimitive|Controller|DayPicker|ChevronLeft|ArrowLeft|ArrowRight|Link|GripVertical|PanelLeft|Separator|Sheet|SheetContent|SheetDescription|SheetHeader|SheetTitle|SheetTrigger|Toast|ToastClose|ToastDescription|ToastProvider|ToastTitle|ToastViewport|App|Skeleton|Tooltip|TooltipContent|TooltipProvider|TooltipTrigger|Comp/u.","line":139,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":139,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"type"},"fix":{"range":[3960,3970],"text":""},"desc":"Remove unused variable 'type'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\n\nimport { cn } from \"../../lib/utils\"\nimport { toggleVariants } from \"./toggle\"\n\n/**\n * Toggle Group context interface\n * @typedef {object} ToggleGroupContextType\n * @property {string} size - Size variant (default, sm, lg)\n * @property {string} variant - Visual variant (default, outline)\n */\n\n/**\n * Default context values\n * @type {ToggleGroupContextType}\n */\nconst defaultContextValue = {\n  size: \"default\",\n  variant: \"default\"\n};\n\n/**\n * Context for sharing toggle variants between components\n * @type {React.Context<ToggleGroupContextType>}\n */\nconst ToggleGroupContext = React.createContext(defaultContextValue);\n\n/**\n * Toggle group component\n * @typedef {object} ToggleGroupPropsBase\n * @property {string} [className] - Additional class names\n * @property {string} [variant] - Visual variant (default, outline)\n * @property {string} [size] - Size variant (default, sm, lg)\n * @property {React.ReactNode} children - Child elements\n */\n \n/**\n * Toggle group multiple mode props\n * @typedef {ToggleGroupPropsBase & {\n *   type: \"multiple\",\n *   value?: string[],\n *   defaultValue?: string[],\n *   onValueChange?: (value: string[]) => void\n * }} ToggleGroupMultipleProps\n */\n\n/**\n * Toggle group single mode props\n * @typedef {ToggleGroupPropsBase & {\n *   type: \"single\",\n *   value?: string,\n *   defaultValue?: string,\n *   onValueChange?: (value: string) => void\n * }} ToggleGroupSingleProps\n */\n\n/**\n * Toggle group combined props type\n * @typedef {ToggleGroupMultipleProps | ToggleGroupSingleProps} ToggleGroupProps\n * \n * @param {ToggleGroupProps} props - The component props\n * @param {React.ForwardedRef<HTMLDivElement>} ref - Forwarded ref\n * @returns {JSX.Element} The toggle group component\n */\n/**\n * The toggle group component with proper typing\n * @type {React.ForwardRefExoticComponent<React.PropsWithoutRef<ToggleGroupProps> & React.RefAttributes<HTMLDivElement>>}\n */\n/**\n * Multiple toggle group component that enforces proper typing\n * @type {React.ForwardRefExoticComponent<React.PropsWithoutRef<ToggleGroupMultipleProps> & React.RefAttributes<HTMLDivElement>>}\n */\nconst MultipleToggleGroup = React.forwardRef(function MultipleToggleGroup(\n  /** @type {ToggleGroupMultipleProps} */ props,\n  /** @type {React.ForwardedRef<HTMLDivElement>} */ ref\n) {\n  const { \n    className, \n    variant, \n    size, \n    children, \n    value,\n    defaultValue,\n    onValueChange,\n    type, // Extract but don't use - already hardcoded in Root\n    ...rest \n  } = props;\n  \n  // Create a contextValue for all children\n  const contextValue = React.useMemo(() => ({\n    variant: variant || defaultContextValue.variant, \n    size: size || defaultContextValue.size \n  }), [variant, size]);\n  \n  // Create a modified rest object without the type property to avoid duplication\n  const safeRest = { ...rest };\n  if ('type' in safeRest) {\n    delete safeRest.type;\n  }\n  \n  return (\n    <ToggleGroupPrimitive.Root\n      ref={ref}\n      type=\"multiple\"\n      value={value}\n      defaultValue={defaultValue}\n      onValueChange={onValueChange}\n      className={cn(\"flex items-center justify-center gap-1\", className)}\n      {...safeRest}\n    >\n      <ToggleGroupContext.Provider value={contextValue}>\n        {children}\n      </ToggleGroupContext.Provider>\n    </ToggleGroupPrimitive.Root>\n  );\n});\n\nMultipleToggleGroup.displayName = \"MultipleToggleGroup\";\n\n/**\n * Single toggle group component that enforces proper typing\n * @type {React.ForwardRefExoticComponent<React.PropsWithoutRef<ToggleGroupSingleProps> & React.RefAttributes<HTMLDivElement>>}\n */\nconst SingleToggleGroup = React.forwardRef(function SingleToggleGroup(\n  /** @type {ToggleGroupSingleProps} */ props,\n  /** @type {React.ForwardedRef<HTMLDivElement>} */ ref\n) {\n  const { \n    className, \n    variant, \n    size, \n    children, \n    value,\n    defaultValue,\n    onValueChange,\n    type, // Extract type to prevent it from being passed to Root\n    ...rest \n  } = props;\n  \n  // Create a contextValue for all children\n  const contextValue = React.useMemo(() => ({\n    variant: variant || defaultContextValue.variant, \n    size: size || defaultContextValue.size \n  }), [variant, size]);\n  \n  // Create a modified rest object without the type property to avoid duplication\n  const safeRest = { ...rest };\n  if ('type' in safeRest) {\n    delete safeRest.type;\n  }\n  \n  return (\n    <ToggleGroupPrimitive.Root\n      ref={ref}\n      type=\"single\"\n      value={value}\n      defaultValue={defaultValue}\n      onValueChange={onValueChange}\n      className={cn(\"flex items-center justify-center gap-1\", className)}\n      {...safeRest}\n    >\n      <ToggleGroupContext.Provider value={contextValue}>\n        {children}\n      </ToggleGroupContext.Provider>\n    </ToggleGroupPrimitive.Root>\n  );\n});\n\nSingleToggleGroup.displayName = \"SingleToggleGroup\";\n\n/**\n * Combined toggle group component that handles both single and multiple modes\n * @type {React.ForwardRefExoticComponent<React.PropsWithoutRef<ToggleGroupProps> & React.RefAttributes<HTMLDivElement>>}\n */\nconst ToggleGroup = React.forwardRef(function ToggleGroup(\n  /** @type {ToggleGroupProps} */ props,\n  /** @type {React.ForwardedRef<HTMLDivElement>} */ ref\n) {\n  // Use type assertion to determine which component to render\n  if (props.type === \"single\") {\n    return <SingleToggleGroup {...props} ref={ref} />;\n  } else {\n    return <MultipleToggleGroup {...props} ref={ref} />;\n  }\n});\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName;\n\n/**\n * Toggle group item component\n * @typedef {object} ToggleGroupItemProps\n * @property {string} value - The unique value of the item\n * @property {React.ReactNode} children - Child elements\n * @property {string} [className] - Additional class names\n * @property {string} [variant] - Visual variant (default, outline)\n * @property {string} [size] - Size variant (default, sm, lg)\n * @property {boolean} [disabled] - Whether the item is disabled\n * \n * @param {ToggleGroupItemProps} props - The component props\n * @param {React.ForwardedRef<HTMLButtonElement>} ref - Forwarded ref\n * @returns {JSX.Element} The toggle group item component\n */\n/**\n * The toggle group item component with proper typing\n * @type {React.ForwardRefExoticComponent<React.PropsWithoutRef<ToggleGroupItemProps> & React.RefAttributes<HTMLButtonElement>>}\n */\nconst ToggleGroupItem = React.forwardRef(function ToggleGroupItem(\n  /** @type {ToggleGroupItemProps} */ props,\n  /** @type {React.ForwardedRef<HTMLButtonElement>} */ ref\n) {\n  const { \n    className, \n    children, \n    variant, \n    size, \n    value = \"\", // Provide default value to avoid undefined\n    ...otherProps \n  } = props;\n  \n  const context = React.useContext(ToggleGroupContext);\n\n  if (value === undefined) {\n    console.warn(\"ToggleGroupItem should have a value prop\");\n  }\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      value={value}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...otherProps}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  );\n});\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName;\n\n/**\n * Export the toggle group components\n */\nexport { ToggleGroup, ToggleGroupItem }","usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/components/ui/toggle.jsx","messages":[{"ruleId":"jsdoc/require-returns","severity":1,"message":"Missing JSDoc @returns declaration.","line":46,"column":3,"nodeType":"Block","endLine":49,"endColumn":6}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva } from \"class-variance-authority\"\n\nimport { cn } from \"../../lib/utils\"\n\n/**\n * Toggle component variants\n * @type {Function}\n */\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\n/**\n * Toggle component variants type\n * @typedef {object} ToggleVariants\n * @property {('default'|'outline')} [variant] - The visual style variant\n * @property {('default'|'sm'|'lg')} [size] - The size variant\n * @property {string} [className] - Additional class names\n */\n\n/**\n * Toggle component for togglable UI elements\n * @type {React.ForwardRefExoticComponent<React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> & React.RefAttributes<React.ElementRef<typeof TogglePrimitive.Root>>>}\n */\nconst Toggle = React.forwardRef(\n  /**\n   * @param {React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root>} props\n   * @param {React.ForwardedRef<React.ElementRef<typeof TogglePrimitive.Root>>} ref\n   */\n  (props, ref) => {\n    // Create safe props object with type checking\n    const safeProps = props || {};\n    \n    // Extract properties with safe type checking using hasOwnProperty and bracket notation\n    let className;\n    if (\n      typeof safeProps === 'object' && \n      safeProps !== null && \n      Object.prototype.hasOwnProperty.call(safeProps, 'className') && \n      typeof safeProps['className'] === 'string'\n    ) {\n      className = safeProps['className'];\n    }\n    \n    // Validate variant is one of the allowed values\n    /** @type {'default'|'outline'} */\n    let variant = 'default'; // Default value\n    if (\n      typeof safeProps === 'object' && \n      safeProps !== null && \n      Object.prototype.hasOwnProperty.call(safeProps, 'variant') && \n      safeProps['variant'] === 'outline'\n    ) {\n      variant = 'outline';\n    }\n    \n    // Validate size is one of the allowed values\n    /** @type {'default'|'sm'|'lg'} */\n    let size = 'default'; // Default value\n    if (\n      typeof safeProps === 'object' && \n      safeProps !== null && \n      Object.prototype.hasOwnProperty.call(safeProps, 'size')\n    ) {\n      const sizeValue = safeProps['size'];\n      if (sizeValue === 'sm' || sizeValue === 'lg') {\n        size = sizeValue;\n      }\n    }\n    \n    // Create clean props object without extracted properties\n    const otherProps = {};\n    if (typeof safeProps === 'object' && safeProps !== null) {\n      Object.keys(safeProps).forEach(key => {\n        if (!['className', 'variant', 'size'].includes(key)) {\n          otherProps[key] = safeProps[key];\n        }\n      });\n    }\n    \n    // Create a safe object to pass to toggleVariants\n    const variantProps = {\n      variant: variant || 'default',\n      size: size || 'default'\n    };\n    \n    // Only add className if it exists\n    if (className) {\n      variantProps.className = className;\n    }\n    \n    return (\n      <TogglePrimitive.Root\n        ref={ref}\n        className={cn(toggleVariants(variantProps))}\n        {...otherProps}\n      />\n    );\n  }\n)\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\n/**\n *\n */\nexport { Toggle, toggleVariants }","usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/components/ui/tooltip.jsx","messages":[{"ruleId":"jsdoc/require-returns","severity":1,"message":"Missing JSDoc @returns declaration.","line":35,"column":3,"nodeType":"Block","endLine":38,"endColumn":6}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"../../lib/utils\"\n\n/**\n * Tooltip provider component\n */\nconst TooltipProvider = TooltipPrimitive.Provider\n\n/**\n * Tooltip root component\n */\nconst Tooltip = TooltipPrimitive.Root\n\n/**\n * Tooltip trigger component\n */\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\n/**\n * Tooltip content component props\n * @typedef {object} TooltipContentProps\n * @property {string} [className] - Additional class names\n * @property {number} [sideOffset=4] - Offset from the trigger\n */\n\n/**\n * Tooltip content component that displays additional information when hovering\n * @type {React.ForwardRefExoticComponent<React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content> & React.RefAttributes<React.ElementRef<typeof TooltipPrimitive.Content>>>}\n */\nconst TooltipContent = React.forwardRef(\n  /**\n   * @param {React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>} props\n   * @param {React.ForwardedRef<React.ElementRef<typeof TooltipPrimitive.Content>>} ref\n   */\n  (props, ref) => {\n    // Create safe props object with type checking\n    const safeProps = props || {};\n    \n    // Extract className with proper type checking using bracket notation\n    let className;\n    if (typeof safeProps === 'object' && safeProps !== null) {\n      const classNameValue = safeProps['className'];\n      if (typeof classNameValue === 'string') {\n        className = classNameValue;\n      }\n    }\n    \n    // Extract sideOffset with proper default and type checking using bracket notation\n    let sideOffset = 4; // Default value\n    if (typeof safeProps === 'object' && safeProps !== null) {\n      const sideOffsetValue = safeProps['sideOffset'];\n      if (typeof sideOffsetValue === 'number' && !isNaN(sideOffsetValue)) {\n        sideOffset = sideOffsetValue;\n      }\n    }\n    \n    // Extract remaining props with a type-safe approach\n    /** @type {Record<string, any>} */\n    const rest = {};\n    if (typeof safeProps === 'object' && safeProps !== null) {\n      // Use a for loop instead of Object.keys().forEach for better type safety\n      const keys = Object.keys(safeProps);\n      for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        if (key !== 'className' && key !== 'sideOffset') {\n          rest[key] = safeProps[key];\n        }\n      }\n    }\n    \n    return (\n      <TooltipPrimitive.Content\n        ref={ref}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n          className\n        )}\n        {...rest}\n      />\n    );\n  }\n)\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\n/**\n *\n */\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }","usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/components/ui/utils.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/hooks/use-mobile.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/hooks/use-toast.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/hooks/useAuth.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/hooks/useSupabaseAuth.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/lib/config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/lib/constants.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/lib/layer-context.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/lib/llm-api.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'successResponse' is assigned a value but never used. Allowed unused vars must match /React|Switch|Route|Redirect|Router|QueryClientProvider|AuthProvider|ProtectedRoute|ChatPage|ChevronRight|MoreHorizontal|ChevronDown|ChevronUp|Search|CheckIcon|ChevronsUpDown|Circle|X|Plus|Minus|Slot|Check|Button|Input|MessageBubble|SocialLoginButton|FcGoogle|FaMicrosoft|FaApple|OTPInput|OTPInputContext|Dot|Dialog|DialogContent|Label|LabelPrimitive|Controller|DayPicker|ChevronLeft|ArrowLeft|ArrowRight|Link|GripVertical|PanelLeft|Separator|Sheet|SheetContent|SheetDescription|SheetHeader|SheetTitle|SheetTrigger|Toast|ToastClose|ToastDescription|ToastProvider|ToastTitle|ToastViewport|App|Skeleton|Tooltip|TooltipContent|TooltipProvider|TooltipTrigger|Comp/u.","line":1464,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":1464,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"successResponse"},"fix":{"range":[57483,57691],"text":""},"desc":"Remove unused variable 'successResponse'."}]}],"suppressedMessages":[{"ruleId":"no-unused-vars","severity":2,"message":"'_fullContent' is assigned a value but never used. Allowed unused vars must match /React|Switch|Route|Redirect|Router|QueryClientProvider|AuthProvider|ProtectedRoute|ChatPage|ChevronRight|MoreHorizontal|ChevronDown|ChevronUp|Search|CheckIcon|ChevronsUpDown|Circle|X|Plus|Minus|Slot|Check|Button|Input|MessageBubble|SocialLoginButton|FcGoogle|FaMicrosoft|FaApple|OTPInput|OTPInputContext|Dot|Dialog|DialogContent|Label|LabelPrimitive|Controller|DayPicker|ChevronLeft|ArrowLeft|ArrowRight|Link|GripVertical|PanelLeft|Separator|Sheet|SheetContent|SheetDescription|SheetHeader|SheetTitle|SheetTrigger|Toast|ToastClose|ToastDescription|ToastProvider|ToastTitle|ToastViewport|App|Skeleton|Tooltip|TooltipContent|TooltipProvider|TooltipTrigger|Comp/u.","line":1170,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":1170,"endColumn":17,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @file Interface for communicating with DeepSeek API\n * Enhanced for Phase 4 with conversation context support, retry mechanism, and advanced error handling\n */\n\nimport { apiRequest } from \"./queryClient.jsx\";\n\n/**\n * Returns a reference to the global object safely across environments\n * @returns {any} The global object\n */\nconst getGlobalThis = () => {\n  if (typeof globalThis !== 'undefined') return globalThis;\n  if (typeof window !== 'undefined') return window;\n  return { };\n};\n\n/**\n * Extended AbortSignal type with custom properties for message delivery status\n * @typedef {object} CustomAbortSignal\n * @property {boolean} aborted - Whether the signal has been aborted\n * @property {boolean} [messageDelivered] - Whether the message was delivered before abort\n * @property {string} [reason] - The reason for the abort\n * @property {(type: string, listener: EventListenerOrEventListenerObject) => void} addEventListener - Add event listener function\n * @property {(type: string, listener: EventListenerOrEventListenerObject) => void} removeEventListener - Remove event listener function\n * @property {(event: Event) => boolean} dispatchEvent - Dispatch event function\n * @property {((event: Event) => void) | null} onabort - Abort event handler\n * @property {() => void} throwIfAborted - Throws if aborted\n */\n\n/**\n * Type guard to check if an object is an Error\n * @param {unknown} obj - The object to check\n * @returns {obj is Error} Whether the object is an Error\n */\nfunction isError(obj) {\n  return obj instanceof Error;\n}\n\n/**\n * Type guard to check if an object is an AbortError\n * @param {unknown} obj - The object to check\n * @returns {boolean} Whether the object is an AbortError\n */\nfunction isAbortError(obj) {\n  return isError(obj) && obj.name === 'AbortError';\n}\n\n/**\n * Type guard to check if an object has our API error shape\n * @param {unknown} obj - The object to check\n * @returns {obj is APIErrorDetails} Whether the object is an API error\n */\nfunction isAPIError(obj) {\n  return Boolean(\n    obj && \n    typeof obj === 'object' &&\n    'type' in obj &&\n    'message' in obj &&\n    typeof obj.type === 'string' &&\n    typeof obj.message === 'string'\n  );\n}\n\n/**\n * @typedef {object} CustomAbortController\n * @property {CustomAbortSignal} signal - The abort signal\n * @property {(reason?: string) => void} abort - Abort function\n */\n\n/**\n * Mock AbortController implementation\n * @class\n */\nfunction MockAbortController() {\n  /** @type {CustomAbortSignal} */\n  this.signal = { \n    aborted: false,\n    messageDelivered: false,\n    reason: '',\n    addEventListener: () => {},\n    removeEventListener: () => {},\n    dispatchEvent: () => false,\n    onabort: null,\n    throwIfAborted: () => { \n      if (this.signal.aborted) throw new Error(this.signal.reason || 'Aborted'); \n    }\n  };\n  \n  /**\n   * Aborts the operation with an optional reason\n   * @param {string} [reason] - The reason for aborting\n   */\n  this.abort = (reason) => { \n    this.signal.aborted = true;\n    this.signal.reason = reason || 'abort';\n  };\n}\n\n// Safe AbortController implementation that works across environments\n/** @type {any} */\nconst GlobalAbortController = (() => {\n  const globals = getGlobalThis();\n  // Safely access AbortController from global scope\n  if (typeof globals === 'object' && globals && 'AbortController' in globals) {\n    return globals.AbortController;\n  }\n  \n  // Fallback to mock implementation\n  return MockAbortController;\n})();\n\n/**\n * Safe timeout functions interface\n * @typedef {object} TimeoutFunctions\n * @property {(callback: (...args: any[]) => void, ms?: number, ...args: any[]) => number|unknown} setTimeout - setTimeout function\n * @property {(id: number|unknown) => void} clearTimeout - clearTimeout function\n */\n\n/**\n * Gets safe timeout functions for cross-environment usage\n * @returns {TimeoutFunctions} Object containing setTimeout and clearTimeout functions\n */\nconst getTimeoutFunctions = () => {\n  const globals = getGlobalThis();\n  return {\n    setTimeout: typeof globals === 'object' && globals && 'setTimeout' in globals \n      ? /** @type {TimeoutFunctions['setTimeout']} */ (globals.setTimeout)\n      : ((_fn, _ms) => { /* Fallback implementation */ return 0; }),\n    clearTimeout: typeof globals === 'object' && globals && 'clearTimeout' in globals\n      ? /** @type {TimeoutFunctions['clearTimeout']} */ (globals.clearTimeout)\n      : ((_id) => { /* Fallback implementation */ })\n  };\n};\n\n/**\n * Gets safe timeout functions that work in both browser and Node environments\n * @returns {TimeoutFunctions} Object containing setTimeout and clearTimeout functions\n */\nexport function getSafeTimeoutFunctions() {\n  return getTimeoutFunctions();\n}\n\n// Extract functions for use within this module\nconst { clearTimeout: safeClearTimeout } = getTimeoutFunctions();\n\n/**\n * DeepSeek API configuration\n * @typedef {object} DeepSeekConfig\n * @property {string} apiKey - API key for DeepSeek\n * @property {string} model - Model identifier\n * @property {number} temperature - Temperature for generation\n * @property {number} maxTokens - Maximum tokens to generate\n * @property {string} endpoint - API endpoint URL\n * @property {number} maxRetries - Maximum number of retry attempts\n * @property {number} retryDelay - Delay between retries in milliseconds\n */\n\n/**\n * Message object for conversation history\n * @typedef {object} Message\n * @property {string} role - The message role (system, user, assistant)\n * @property {string} content - The message content\n */\n\n/**\n * API Error response with detailed information\n * @typedef {object} APIErrorDetails\n * @property {string} type - The error type (network, api, timeout, validation)\n * @property {string} message - Human-readable error message\n * @property {number} [status] - HTTP status code if available\n * @property {object} [originalError] - The original error object\n * @property {boolean} [isHighRisk] - Whether the error is related to a high-risk query\n * @property {boolean} [messageDelivered] - Whether message was delivered before error\n * @property {string} [deliveredContent] - Content that was delivered before error\n */\n\n/**\n * API Response with metadata\n * @typedef {object} APIResponse\n * @property {string} content - The response content\n * @property {object} metadata - Response metadata\n * @property {number} metadata.requestTime - Request time in milliseconds\n * @property {number} metadata.promptTokens - Number of prompt tokens\n * @property {number} metadata.completionTokens - Number of completion tokens\n * @property {number} metadata.totalTokens - Total tokens used\n * @property {string} metadata.modelName - Model name used\n * @property {boolean} [metadata.isHighRisk] - Whether the response is for a high-risk query\n */\n\n/**\n * List of high-risk medical terms that might indicate emergencies\n * @type {string[]}\n */\nconst HIGH_RISK_TERMS = [\n  \"heart attack\", \"stroke\", \"seizure\", \"suicide\", \"emergency\", \n  \"severe bleeding\", \"unconscious\", \"not breathing\", \"overdose\", \n  \"poison\", \"dying\", \"chest pain\", \"difficulty breathing\", \"choking\",\n  \"collapsed\", \"unresponsive\", \"severe pain\", \"head trauma\", \"gunshot\",\n  \"bleeding heavily\", \"vomiting blood\", \"anaphylaxis\", \"allergic reaction\",\n  \"drowning\", \"suffocating\", \"suicidal\", \"self-harm\", \"911\"\n];\n\n/**\n * List of mental health crisis terms\n * @type {string[]}\n */\nconst MENTAL_HEALTH_CRISIS_TERMS = [\n  \"suicidal\", \"kill myself\", \"end my life\", \"suicide\", \"self-harm\", \n  \"hurting myself\", \"want to die\", \"suicidal thoughts\", \"don't want to live\",\n  \"no reason to live\", \"severe depression\", \"crisis\", \"panic attack\",\n  \"mental breakdown\", \"psychosis\", \"hallucinating\"\n];\n\n/**\n * List of terms that might indicate a professional medical query\n * @type {string[]}\n */\nconst PROFESSIONAL_MEDICAL_TERMS = [\n  \"differential diagnosis\", \"etiology\", \"pathophysiology\", \"contraindication\",\n  \"comorbidity\", \"prognosis\", \"clinical presentation\", \"treatment protocol\",\n  \"medical management\", \"pharmacokinetics\", \"pharmacodynamics\", \"evidence-based\",\n  \"meta-analysis\", \"clinical trial\", \"epidemiology\", \"physician\", \"doctor\", \"healthcare provider\",\n  \"medical professional\", \"clinical guidelines\", \"medical literature\", \"biomarker\",\n  \"pathology\", \"histology\", \"pharmacology\", \"therapeutics\", \"immunology\", \"nosocomial\",\n  \"idiopathic\", \"iatrogenic\", \"prodromal\", \"prophylaxis\", \"anticoagulation\", \"endogenous\"\n];\n\n/**\n * List of terms that might indicate a chronic condition management query\n * @type {string[]}\n */\nconst CHRONIC_CONDITION_TERMS = [\n  \"chronic\", \"long-term\", \"management\", \"flare-up\", \"remission\", \"daily\", \"monitoring\",\n  \"regular\", \"ongoing\", \"lifelong\", \"continuous\", \"persistent\", \"recurrent\", \"exacerbation\",\n  \"maintenance\", \"therapy\", \"symptom management\", \"quality of life\", \"lifestyle changes\",\n  \"coping strategies\", \"support group\", \"long covid\", \"diabetes\", \"hypertension\", \"arthritis\"\n];\n\n/**\n * List of terms that might indicate a prevention-focused healthcare query\n * @type {string[]}\n */\nconst PREVENTION_TERMS = [\n  \"prevent\", \"prevention\", \"preventative\", \"preventive\", \"risk factor\", \"risk reduction\",\n  \"screening\", \"early detection\", \"exercise\", \"diet\", \"nutrition\", \"healthy lifestyle\",\n  \"vaccination\", \"immunization\", \"check-up\", \"wellness\", \"health promotion\", \"self-care\",\n  \"supplements\", \"vitamins\", \"avoid\", \"reduce risk\", \"protect\", \"lower chances\"\n];\n\n/**\n * List of personal identifying information patterns to detect\n * @type {RegExp[]}\n */\nconst PII_PATTERNS = [\n  /\\b\\d{3}[-.]?\\d{2}[-.]?\\d{4}\\b/, // SSN pattern\n  /\\b\\d{9}\\b/, // 9-digit number (potential SSN without separators)\n  /\\b\\d{16}\\b/, // Credit card number pattern (simplified)\n  /\\b(?:\\d[ -]?){13,16}\\b/, // Credit card with separators\n  /\\b[A-Z]{2}\\d{6,8}\\b/i, // Passport number pattern (simplified)\n  /\\b\\d{3}[-]?\\d{3}[-]?\\d{4}\\b/, // Phone number\n  /\\b[A-Z]\\d{7}\\b/i, // Driver's license (some states)\n  /\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\b/ // IP address\n];\n\n/**\n * List of off-topic or irrelevant request patterns\n * @type {RegExp[]}\n */\nconst OFF_TOPIC_PATTERNS = [\n  /\\bhack\\b/i, /\\bpassword\\b/i, /\\blogin\\b/i, /\\baccess\\b/i, /\\bcredit card\\b/i,\n  /\\bbank\\b/i, /\\bfinancial\\b/i, /\\bmoney\\b/i, /\\binvest\\b/i, /\\bstock\\b/i,\n  /\\bgambling\\b/i, /\\bcasino\\b/i, /\\blottery\\b/i, /\\bbet\\b/i, /\\bvpn\\b/i,\n  /\\btorrent\\b/i, /\\bpirate\\b/i, /\\billegal\\b/i, /\\bdrug dealer\\b/i, /\\bdealers\\b/i,\n  /\\bweapon\\b/i, /\\bgun\\b/i, /\\bporno\\b/i, /\\badult content\\b/i, /\\bxxx\\b/i,\n  /\\bmanipulate\\b/i, /\\bgenerate code\\b/i, /\\bwrite (a|an) (essay|paper)\\b/i\n];\n\n/**\n * Medical disclaimer for emergency situations\n * @type {string}\n */\nconst EMERGENCY_DISCLAIMER = \n  \"IMPORTANT: If you're experiencing a medical emergency, please seek immediate medical attention \" +\n  \"by contacting your local emergency services (911 in the US) or go to your nearest emergency room. \" +\n  \"I cannot provide emergency medical assistance, and delays in care may result in serious harm. \" +\n  \"The information provided here is for general educational purposes only, not a substitute for professional medical advice.\";\n\n/**\n * Mental health crisis disclaimer\n * @type {string}\n */\nconst MENTAL_HEALTH_DISCLAIMER =\n  \"IMPORTANT: If you're experiencing thoughts of self-harm or suicide, please reach out immediately \" +\n  \"to a mental health professional, call a crisis helpline (such as 988 Suicide & Crisis Lifeline in the US, \" +\n  \"or text HOME to 741741), or go to your nearest emergency room. Your life matters, and trained professionals \" +\n  \"are available 24/7 to provide support during this difficult time.\";\n\n/**\n * Off-topic or restricted content message\n * @type {string}\n */\nconst OFF_TOPIC_MESSAGE =\n  \"I'm designed to provide medical and health information only. I can't assist with this request \" +\n  \"as it appears to be outside my area of focus. Please feel free to ask me about health topics, \" +\n  \"medical conditions, wellness information, or general health education questions instead.\";\n\n/**\n * Privacy concern message about personal information\n * @type {string}\n */\nconst PRIVACY_MESSAGE =\n  \"I notice your message may contain personal identifying information. For your privacy and security, \" +\n  \"please don't share sensitive personal details like ID numbers, full addresses, or other identifying information. \" +\n  \"I'm happy to help with your medical question without needing this personal data.\";\n\n/**\n * Interface for detected query characteristics\n * @typedef {object} QueryIntent\n * @property {boolean} isHighRisk - Whether query contains high-risk medical terms\n * @property {boolean} isMentalHealthCrisis - Whether query indicates a mental health crisis\n * @property {boolean} isOffTopic - Whether query is off-topic or inappropriate\n * @property {boolean} containsPII - Whether query contains personal identifying information\n * @property {boolean} isProfessionalQuery - Whether query uses professional medical terminology\n * @property {boolean} isSymptomBased - Whether query is about symptoms vs. general information\n * @property {boolean} isChronicCondition - Whether query relates to chronic condition management\n * @property {boolean} isPreventionFocused - Whether query relates to preventative healthcare\n * @property {boolean} hasColdExtremities - Whether query mentions cold sensations in extremities\n * @property {string} [symptomLocation] - Body part mentioned in symptom description\n * @property {string} [symptomType] - Type of symptom mentioned (e.g., temperature, pain, etc.)\n * @property {string} [disclaimer] - Appropriate disclaimer based on detected characteristics\n */\n\n\n\n/**\n * Message response interface for AI-generated responses\n * @typedef {object} MessageResponse\n * @property {string} content - The message content text\n * @property {any} metadata - Additional metadata about the message\n * @property {boolean} [isCancelled] - Whether this message was cancelled by user\n * @property {boolean} [cancelled] - Alternative property for cancellation status\n * @property {string} [status] - Status of the message (delivered, cancelled, etc.)\n */\n\n/**\n * Base response object shape\n * @typedef {object} BaseResponse\n * @property {string} content - The response content\n * @property {any} metadata - The response metadata\n */\n\n/**\n * @typedef {MessageResponse} ExtendedMessageResponse\n */\n\n/**\n * Analyzes message text to determine intent, risks, and appropriate response style\n * @param {string} messageText - The message to analyze\n * @returns {QueryIntent} Detected intent characteristics\n */\nfunction analyzeQueryIntent(messageText) {\n  if (!messageText || typeof messageText !== 'string') {\n    return {\n      isHighRisk: false,\n      isMentalHealthCrisis: false,\n      isOffTopic: false,\n      containsPII: false,\n      isProfessionalQuery: false,\n      isSymptomBased: false,\n      isChronicCondition: false,\n      isPreventionFocused: false,\n      hasColdExtremities: false\n    };\n  }\n  \n  const lowerMessage = messageText.toLowerCase();\n  \n  // Check for high-risk medical terms\n  const isHighRisk = HIGH_RISK_TERMS.some(term => lowerMessage.includes(term));\n  \n  // Check for mental health crisis indicators\n  const isMentalHealthCrisis = MENTAL_HEALTH_CRISIS_TERMS.some(term => lowerMessage.includes(term));\n  \n  // Check for professional medical terminology\n  const isProfessionalQuery = PROFESSIONAL_MEDICAL_TERMS.some(term => lowerMessage.includes(term));\n  \n  // Check for personal identifying information\n  const containsPII = PII_PATTERNS.some(pattern => pattern.test(messageText));\n  \n  // Check for off-topic or inappropriate requests\n  const isOffTopic = OFF_TOPIC_PATTERNS.some(pattern => pattern.test(messageText));\n  \n  // Heuristic for symptom-based vs informational queries\n  // Symptom-based queries often start with \"I have\", \"I am feeling\", etc.\n  const isSymptomBased = /\\b(i ('m|am|have|feel|experiencing|suffer|got)|my)\\b/i.test(lowerMessage);\n  \n  // Check for chronic condition management queries\n  const isChronicCondition = CHRONIC_CONDITION_TERMS.some(term => lowerMessage.includes(term));\n  \n  // Check for prevention-focused health queries\n  const isPreventionFocused = PREVENTION_TERMS.some(term => lowerMessage.includes(term));\n  \n  // Define body parts list for symptom location detection\n  const bodyParts = [\n    'head', 'neck', 'chest', 'back', 'arm', 'arms', 'hand', 'hands', 'finger', 'fingers', \n    'leg', 'legs', 'knee', 'knees', 'ankle', 'ankles', 'foot', 'feet', 'toe', 'toes', \n    'shoulder', 'shoulders', 'elbow', 'elbows', 'wrist', 'wrists', 'hip', 'hips', \n    'stomach', 'abdomen', 'throat', 'ear', 'ears', 'eye', 'eyes', 'nose', 'mouth'\n  ];\n  \n  // Identify symptom location\n  let symptomLocation = '';\n  for (const part of bodyParts) {\n    if (lowerMessage.includes(part)) {\n      symptomLocation = part;\n      break;\n    }\n  }\n  \n  // Define symptom types\n  const symptomTypes = {\n    temperature: ['cold', 'hot', 'warm', 'cool', 'freezing', 'chilly', 'heat'],\n    pain: ['pain', 'ache', 'hurt', 'sore', 'tender', 'discomfort', 'burning'],\n    skin: ['rash', 'itch', 'swelling', 'bump', 'red', 'pale', 'blue', 'color'],\n    sensation: ['numb', 'tingle', 'prickle', 'pins and needles', 'sensitive'],\n    motion: ['stiff', 'weak', 'difficult', 'move', 'mobility', 'frozen', 'locked']\n  };\n  \n  // Identify symptom type\n  let symptomType = '';\n  for (const [type, terms] of Object.entries(symptomTypes)) {\n    if (terms.some(term => lowerMessage.includes(term))) {\n      symptomType = type;\n      break;\n    }\n  }\n  \n  // Special case for cold extremities - enhanced detection\n  const coldExtremityTerms = ['cold', 'cool', 'freezing', 'chilly', 'icy', 'frozen'];\n  const extremityTerms = ['feet', 'foot', 'hand', 'hands', 'finger', 'fingers', 'toe', 'toes', \n    'leg', 'legs', 'arm', 'arms', 'extremit', 'limb'];\n  \n  // Check for both cold terms and extremity terms in the message\n  const hasColdTerms = coldExtremityTerms.some(term => lowerMessage.includes(term));\n  const hasExtremityTerms = extremityTerms.some(part => lowerMessage.includes(part));\n  \n  // Check for phrases indicating cold extremities vs common cold\n  const hasColdExtremities = hasColdTerms && hasExtremityTerms && \n    // Negative check for common cold phrases\n    !(lowerMessage.includes('common cold') || \n      lowerMessage.includes('have a cold') || \n      lowerMessage.includes('caught a cold') ||\n      (lowerMessage.includes('cold') && lowerMessage.includes('flu')));\n  \n  // Determine appropriate disclaimer\n  let disclaimer = '';\n  if (isMentalHealthCrisis) {\n    disclaimer = MENTAL_HEALTH_DISCLAIMER;\n  } else if (isHighRisk) {\n    disclaimer = EMERGENCY_DISCLAIMER;\n  } else if (isOffTopic) {\n    disclaimer = OFF_TOPIC_MESSAGE;\n  } else if (containsPII) {\n    disclaimer = PRIVACY_MESSAGE;\n  }\n  \n  return {\n    isHighRisk,\n    isMentalHealthCrisis,\n    isOffTopic,\n    containsPII,\n    isProfessionalQuery,\n    isSymptomBased,\n    isChronicCondition,\n    isPreventionFocused,\n    hasColdExtremities,\n    symptomLocation,\n    symptomType,\n    disclaimer\n  };\n}\n\n/**\n * Gets the DeepSeek API configuration from environment variables\n * @returns {DeepSeekConfig} The DeepSeek configuration\n */\nfunction getDeepSeekConfig() {\n  // Simple config object with API key\n  return {\n    apiKey: \"\",  // This will be set via server-side context\n    model: \"deepseek-chat\",\n    temperature: 0.7,\n    maxTokens: 2000,\n    endpoint: \"https://api.deepseek.com/v1/chat/completions\",\n    maxRetries: 3,\n    retryDelay: 1000\n  };\n}\n\n/**\n * Creates a standardized response metadata object\n * @param {number} requestTime - Time taken for the request in milliseconds\n * @param {object} data - Response data from the API\n * @param {QueryIntent|null} queryIntent - Query intent analysis results\n * @param {object} [options={}] - Additional options for metadata\n * @returns {object} Standardized metadata object\n */\nfunction createResponseMetadata(requestTime, data, queryIntent, options = {}) {\n  return {\n    requestTime,\n    promptTokens: data?.usage?.prompt_tokens || 0,\n    completionTokens: data?.usage?.completion_tokens || 0,\n    totalTokens: data?.usage?.total_tokens || 0,\n    modelName: data?.model || options.modelName || \"deepseek-chat\",\n    ...(queryIntent ? { queryIntent: extractQueryIntentMetadata(queryIntent) } : {}),\n    ...options\n  };\n}\n\n/**\n * Basic version of disclaimer addition (legacy)\n * @param {string} content - The content to add disclaimers to\n * @param {QueryIntent} queryIntent - Query intent analysis results\n * @returns {string} Content with appropriate disclaimers\n * @deprecated Use enhanced addDisclaimers function below\n *\n * Note: This function is kept for backward compatibility but should not be used in new code.\n */\n// Exported to avoid unused variable warning while preserving for backward compatibility\nexport function _addBasicDisclaimers(content, queryIntent) {\n  if (!queryIntent) return content;\n  \n  let result = content;\n  \n  if (queryIntent.disclaimer) {\n    result = `${queryIntent.disclaimer}\\n\\n${result}`;\n  }\n  \n  return result;\n}\n\n// The extractQueryIntentMetadata function is defined later in the file (line ~538)\n// This duplicate declaration has been removed for code stability\n\n/**\n * Adds appropriate disclaimers to response content based on query intent\n * @param {string} content - The response content\n * @param {QueryIntent} queryIntent - The query intent analysis results\n * @param {boolean} [isHighRisk=false] - Whether message is high risk (fallback)\n * @returns {string} Response with added disclaimers if needed\n */\nfunction addDisclaimers(content, queryIntent, isHighRisk = false) {\n  if (!content) return '';\n  \n  // Add specific disclaimer if available in query intent\n  if (queryIntent?.disclaimer) {\n    return `${queryIntent.disclaimer}\\n\\n${content}`;\n  } \n  \n  // Add emergency disclaimer for high-risk content\n  if (queryIntent?.isHighRisk || isHighRisk) {\n    return `${EMERGENCY_DISCLAIMER}\\n\\n${content}`;\n  }\n  \n  // Return original content if no disclaimers needed\n  return content;\n}\n\n// Using the createResponseMetadata function defined earlier\n\n// The withExponentialBackoff function is defined later in the file (line ~478)\n// This duplicate declaration has been removed for code stability\n\n/**\n * Gets follow-up suggestions based on query intent\n * @param {QueryIntent} queryIntent - Query intent analysis results\n * @returns {string[]} Array of suggested follow-up questions\n */\nexport function getFollowUpSuggestions(queryIntent) {\n  if (!queryIntent) {\n    return [\n      \"What other medical information can I help with?\",\n      \"Do you have any other questions?\",\n      \"Is there anything else you'd like to know?\"\n    ];\n  }\n  \n  // Default medical-focused follow-up suggestions\n  const defaultSuggestions = [\n    \"What symptoms should I watch for?\",\n    \"Are there any home remedies?\",\n    \"When should I see a doctor?\",\n    \"Is this condition contagious?\"\n  ];\n  \n  // If this is a symptom-based query, suggest more specific follow-ups\n  if (queryIntent.isSymptomBased) {\n    return [\n      \"What could be causing these symptoms?\",\n      \"How long should I expect this to last?\",\n      \"Are there any warning signs I should watch for?\",\n      \"What tests might a doctor recommend?\"\n    ];\n  }\n  \n  // If this is a chronic condition management query\n  if (queryIntent.isChronicCondition) {\n    return [\n      \"What lifestyle changes can help manage this condition?\",\n      \"How often should I monitor this condition?\",\n      \"What are common complications to watch for?\",\n      \"Are there support groups for this condition?\"\n    ];\n  }\n  \n  // If this is a prevention-focused query\n  if (queryIntent.isPreventionFocused) {\n    return [\n      \"What screening tests are recommended?\",\n      \"How effective is this preventative measure?\",\n      \"Are there any risks to this prevention strategy?\",\n      \"How often should I get this preventative care?\"\n    ];\n  }\n  \n  // If this is a professional query, suggest more clinical follow-ups\n  if (queryIntent.isProfessionalQuery) {\n    return [\n      \"What are the diagnostic criteria?\",\n      \"Are there any recent treatment guideline updates?\",\n      \"What's the typical prognosis?\",\n      \"Are there any significant drug interactions?\"\n    ];\n  }\n  \n  return defaultSuggestions;\n}\n\n/**\n * Implements exponential backoff for retrying failed API requests\n * @param {Function} apiCall - Async function to call the API\n * @param {number} [maxRetries=3] - Maximum number of retry attempts\n * @param {number} [initialDelay=1000] - Initial delay in milliseconds\n * @param {Function} [onRetry] - Optional callback to execute on each retry\n * @returns {Promise<any>} Result of the successful API call\n * @throws {Error} If all retries fail\n */\nasync function withExponentialBackoff(apiCall, maxRetries = 3, initialDelay = 1000, onRetry = null) {\n  let lastError = null;\n  let delay = initialDelay;\n  \n  for (let attempt = 0; attempt <= maxRetries; attempt++) {\n    try {\n      // Execute the API call\n      const result = await apiCall(attempt);\n      return result;\n    } catch (error) {\n      lastError = error;\n      \n      // On the last attempt, don't retry\n      if (attempt === maxRetries) break;\n      \n      // Execute optional retry callback\n      if (onRetry) onRetry(error, attempt, delay);\n      \n      // Wait for the calculated delay\n      await new Promise(resolve => window.setTimeout(resolve, delay));\n      \n      // Exponential backoff: double the delay for next attempt\n      delay *= 2;\n    }\n  }\n  \n  // If we get here, all attempts failed\n  throw lastError;\n}\n\n/**\n * Checks if a message contains high-risk medical terms\n * @param {string} message - The message to check\n * @returns {boolean} Whether the message contains high-risk terms\n * @private Internal utility function\n */\n// Exported to avoid unused variable warning while preserving for backward compatibility\nexport function _containsHighRiskTerms(message) {\n  const lowerCaseMessage = message.toLowerCase();\n  return HIGH_RISK_TERMS.some(term => lowerCaseMessage.includes(term));\n}\n\n/**\n * Creates a standardized error object with detailed information\n * @param {string} type - The error type\n * @param {string} message - Human-readable error message\n * @param {object} [details={}] - Additional error details\n * @returns {APIErrorDetails} Standardized error object\n */\nfunction createAPIError(type, message, details = {}) {\n  // Ensure required properties have the correct types\n  const safeType = typeof type === 'string' ? type : 'unknown';\n  const safeMessage = typeof message === 'string' ? message : 'Unknown error';\n  \n  // Ensure details is an object\n  const safeDetails = typeof details === 'object' && details !== null ? details : {};\n\n  return {\n    type: safeType,\n    message: safeMessage,\n    ...safeDetails\n  };\n}\n\n/**\n * Extracts query intent metadata from a queryIntent object for consistent usage\n * @param {QueryIntent} queryIntent - The query intent object to extract metadata from\n * @returns {object} Standardized metadata object\n */\nfunction extractQueryIntentMetadata(queryIntent) {\n  if (!queryIntent) {\n    return {\n      isHighRisk: false,\n      isMentalHealthCrisis: false,\n      isOffTopic: false,\n      containsPII: false,\n      isProfessionalQuery: false,\n      isSymptomBased: false,\n      isChronicCondition: false,\n      isPreventionFocused: false,\n      hasColdExtremities: false,\n      symptomLocation: '',\n      symptomType: ''\n    };\n  }\n  \n  return {\n    isHighRisk: queryIntent.isHighRisk,\n    isMentalHealthCrisis: queryIntent.isMentalHealthCrisis,\n    isOffTopic: queryIntent.isOffTopic,\n    containsPII: queryIntent.containsPII,\n    isProfessionalQuery: queryIntent.isProfessionalQuery,\n    isSymptomBased: queryIntent.isSymptomBased,\n    isChronicCondition: queryIntent.isChronicCondition,\n    isPreventionFocused: queryIntent.isPreventionFocused,\n    hasColdExtremities: queryIntent.hasColdExtremities || false,\n    symptomLocation: queryIntent.symptomLocation || '',\n    symptomType: queryIntent.symptomType || ''\n  };\n}\n\n/**\n * Prepares messages array for API request, including conversation history if available\n * @param {string} message - The current user message\n * @param {Array<Message>} [history=[]] - Previous conversation history\n * @param {boolean} [includeSystemPrompt=true] - Whether to include the system prompt\n * @param {string} [customPrompt=''] - Optional custom prompt instructions to add to system message\n * @returns {Array<Message>} Messages array for API request\n */\nfunction prepareMessages(message, history = [], includeSystemPrompt = true, customPrompt = '') {\n  const messages = [];\n  \n  if (includeSystemPrompt) {\n    const medicalContext = `You are MAIA (Medical AI Assistant) from Anamnesis, a sophisticated medical assistant designed to provide accurate, \n      evidence-based health information while maintaining a compassionate, professional tone.\n\n      ## Core Guidelines:\n      1. Always clarify that you are not providing medical advice and users should consult healthcare professionals for diagnosis and treatment.\n      2. Be thorough, accurate, and cite trustworthy medical information from established sources when possible.\n      3. Use plain language and avoid jargon when speaking to non-professionals.\n      4. Adapt your language to match the technical level of the question (clinical language for professional queries).\n      5. Structure your answers in a clear, organized way with appropriate paragraphs and bullet points when helpful.\n      \n      ## Safety & Disclaimers:\n      - For any potentially serious symptoms (chest pain, difficulty breathing, severe bleeding, loss of consciousness), begin your response with a clear emergency disclaimer.\n      - Never suggest specific medications, dosages, or treatments; instead discuss general treatment approaches mentioned in medical guidelines.\n      - If a query relates to mental health crisis, always emphasize the importance of immediate professional help.\n      \n      ## Response Style:\n      - Begin with a brief, direct answer to the main question\n      - Follow with relevant context and deeper explanation\n      - Include common causes, symptoms or related information as appropriate\n      - Close with a reminder about consulting healthcare professionals when needed\n      - Show empathy and understanding, especially for sensitive health topics\n      \n      ## Symptom Analysis:\n      - Pay close attention to the anatomical context of symptoms (e.g., \"cold feet\" vs \"common cold\")\n      - Distinguish between temperature-related symptoms in extremities and infectious conditions\n      - When users mention symptoms in specific body locations, focus responses on that location\n      - Consider circulatory issues when extremities (hands, feet) are described as cold, numb, or tingling\n      \n      ## What to Avoid:\n      - Do not collect or request personal identifying information (name, address, etc.)\n      - Avoid definitive diagnostic statements like \"you have X condition\"\n      - Do not claim to replace proper medical consultation\n      - Refrain from commenting on the efficacy of alternative/unproven treatments\n      \n      Remember that your purpose is to inform and educate, not diagnose or treat. Focus on providing factual, \n      evidence-based information presented in a way that's helpful and easy to understand.\n      \n      ${customPrompt ? `\\n\\n## Query-Specific Instructions:\\n${customPrompt}` : ''}`;\n    \n    messages.push({ role: \"system\", content: medicalContext });\n  }\n  \n  // Include conversation history if available (limited to last 10 messages)\n  if (history.length > 0) {\n    messages.push(...history.slice(-10));\n  }\n  \n  // Add current message\n  messages.push({ role: \"user\", content: message });\n  \n  return messages;\n}\n\n/**\n * Creates a customized prompt based on detected query intent\n * @param {QueryIntent} queryIntent - The detected intent of the user's query\n * @returns {string} Customized prompt to prepend to the system message\n */\nfunction createCustomPrompt(queryIntent) {\n  const promptParts = [];\n  \n  // Add specific instructions based on query intent\n  if (queryIntent.isOffTopic) {\n    promptParts.push(\n      \"The user has asked about a topic outside of medical and health information. \" +\n      \"Politely redirect them to health-related topics only.\"\n    );\n  }\n  \n  if (queryIntent.containsPII) {\n    promptParts.push(\n      \"The user has shared what appears to be personal identifying information. \" +\n      \"Do not acknowledge, repeat, or store this information in your response.\"\n    );\n  }\n  \n  if (queryIntent.isHighRisk) {\n    promptParts.push(\n      \"The user is asking about a potentially high-risk medical situation. \" +\n      \"Begin your response with an emergency disclaimer and emphasize the importance \" +\n      \"of seeking immediate professional medical attention.\"\n    );\n  }\n  \n  if (queryIntent.isMentalHealthCrisis) {\n    promptParts.push(\n      \"The user may be experiencing a mental health crisis. \" +\n      \"Begin with a supportive, non-judgmental tone. \" +\n      \"Emphasize the importance of speaking with a mental health professional immediately \" +\n      \"and provide crisis hotline information.\"\n    );\n  }\n  \n  // Adapt tone based on professional vs layperson language\n  if (queryIntent.isProfessionalQuery) {\n    promptParts.push(\n      \"The user appears to be a healthcare professional or is using medical terminology. \" +\n      \"You may use more technical language and clinical details in your response, while still \" +\n      \"ensuring accuracy and evidence-based information.\"\n    );\n  } else {\n    promptParts.push(\n      \"Respond using clear, plain language without medical jargon. \" +\n      \"Define any necessary medical terms clearly.\"\n    );\n  }\n  \n  // Adapt response for symptom-based vs informational queries\n  if (queryIntent.isSymptomBased) {\n    promptParts.push(\n      \"The user is describing personal symptoms. \" +\n      \"Be empathetic and informative without making specific diagnostic claims. \" +\n      \"Clearly state that your information is educational only and encourage appropriate \" +\n      \"medical consultation. Describe possible causes in general terms while emphasizing the \" +\n      \"importance of professional diagnosis.\"\n    );\n  }\n  \n  // Adapt response for chronic condition management\n  if (queryIntent.isChronicCondition) {\n    promptParts.push(\n      \"The user is asking about chronic condition management. \" +\n      \"Focus on evidence-based self-management strategies, lifestyle modifications, \" +\n      \"and the importance of regular medical monitoring. \" +\n      \"Include information about potential complications to watch for \" +\n      \"and when to seek medical attention for changes in condition.\"\n    );\n  }\n  \n  // Adapt response for prevention-focused health queries\n  if (queryIntent.isPreventionFocused) {\n    promptParts.push(\n      \"The user is asking about preventative healthcare. \" +\n      \"Focus on evidence-based prevention strategies, lifestyle modifications, \" +\n      \"and appropriate screening recommendations based on general guidelines. \" +\n      \"Emphasize the importance of consistent preventative care and regular check-ups \" +\n      \"with healthcare providers.\"\n    );\n  }\n  \n  // Special handling for cold extremities\n  if (queryIntent.hasColdExtremities) {\n    promptParts.push(\n      \"The user is describing cold extremities (cold hands, feet, fingers, toes, etc). \" +\n      \"This is NOT about the common cold respiratory infection. \" +\n      \"Focus on circulatory issues, Raynaud's phenomenon, peripheral vascular conditions, \" +\n      \"and other causes of cold sensations in extremities. \" +\n      \"Discuss potential cardiovascular, neurological, and endocrine factors that can \" +\n      \"affect temperature regulation in hands and feet.\"\n    );\n  }\n  \n  // Add specific guidance based on symptom location if available\n  if (queryIntent.symptomLocation && queryIntent.symptomType) {\n    promptParts.push(\n      `The user is describing ${queryIntent.symptomType}-related symptoms in their ${queryIntent.symptomLocation}. ` +\n      `Focus your response on this specific anatomical location and symptom type. ` +\n      `Include information about common conditions affecting the ${queryIntent.symptomLocation} ` +\n      `that present with ${queryIntent.symptomType} sensations.`\n    );\n  }\n  \n  // Default case - if none of the specific categories apply\n  if (!queryIntent.isSymptomBased && !queryIntent.isChronicCondition && \n      !queryIntent.isPreventionFocused && !queryIntent.isProfessionalQuery) {\n    promptParts.push(\n      \"Provide comprehensive, educational information on the topic. \" +\n      \"Include relevant context about prevalence, mechanisms, and general approaches to management when appropriate.\"\n    );\n  }\n  \n  return promptParts.join(\"\\n\\n\");\n}\n\n/**\n * Sends a message to the LLM API with enhanced error handling and retry logic\n * @param {string} message - The user message to send\n * @param {Array<Message>} [history=[]] - Previous conversation history\n * @returns {Promise<APIResponse>} The AI response with metadata\n * @throws {APIErrorDetails} Standardized error object if request fails\n */\n/**\n * Sends a message to the Medical AI Assistant with optional streaming support\n * @param {string} message - The message to send\n * @param {Array<{role: string, content: string}>} [history=[]] - Previous conversation history\n * @param {object} [_options={}] - Additional options for the request (unused, kept for API compatibility)\n * @param {Function} [onStreamingUpdate=null] - Callback for streaming updates\n * @returns {Promise<{content: string, metadata: object}>} The AI response\n */\nexport async function sendMessage(message, history = [], _options = {}, onStreamingUpdate = null) {\n  // Validate input\n  if (!message || typeof message !== \"string\" || message.trim() === \"\") {\n    throw createAPIError(\"validation\", \"Message cannot be empty\");\n  }\n  \n  // Analyze the query intent to determine response style and safety features\n  const queryIntent = analyzeQueryIntent(message);\n  \n  // Custom prompt generation is now handled directly in the request handlers\n  // This comment block previously created the customPrompt and formatted messages\n  // const customPrompt = createCustomPrompt(queryIntent);\n  \n  // Determine if we should use streaming based on callback presence\n  const useStreaming = typeof onStreamingUpdate === 'function';\n  \n  try {\n    // Start timing the request\n    const startTime = Date.now();\n    \n    if (useStreaming) {\n      return await handleStreamingRequest(message, history, queryIntent, onStreamingUpdate, startTime);\n    } else {\n      // Standard non-streaming request\n      return await handleStandardRequest(message, history, queryIntent, startTime);\n    }\n  } catch (error) {\n    // CRITICAL FIX: Suppress errors for specific conditions\n    // 1. Message was already delivered successfully\n    // 2. Request was manually aborted by user\n    // 3. AbortError which is harmless after successful delivery\n    // 4. ReferenceError which can happen during cleanup but is harmless\n    if (\n      error.messageDelivered === true || \n      (streamAbortController && streamAbortController.signal && streamAbortController.signal.aborted) ||\n      error.name === 'AbortError' || \n      error instanceof ReferenceError\n    ) {\n      console.log(\"Suppressing harmless error:\", error);\n      return {\n        content: error.deliveredContent || \"Response received successfully.\",\n        metadata: {\n          status: 'delivered',\n          error: false,\n          isComplete: true\n        }\n      };\n    }\n    \n    console.error(\"Error in message handling, attempting retry:\", error);\n    \n    // Try backend with retry mechanism\n    try {\n      const apiResponse = await retryApiRequest(\"/api/chat\", message, history, queryIntent.isHighRisk || queryIntent.isMentalHealthCrisis, queryIntent);\n      return apiResponse;\n    } catch (retryError) {\n      // Final check - if the message was aborted (especially manually), don't show errors\n      if (streamAbortController && streamAbortController.signal && streamAbortController.signal.aborted) {\n        console.log(\"Suppressing retry error - request was aborted\");\n        return {\n          content: \"Response received or request cancelled.\",\n          metadata: {\n            status: 'cancelled',\n            error: false\n          }\n        };\n      }\n      \n      console.error(\"All backend retries failed, falling back to client-side:\", retryError);\n      \n      // If the backend endpoint fails or isn't available, fall back to client-side implementation\n      try {\n        const clientResponse = await sendMessageClientSide(message, history, queryIntent);\n        return clientResponse;\n      } catch (clientError) {\n        // If client-side also fails, throw a user-friendly error\n        throw createAPIError(\n          clientError.type || \"api\",\n          \"Unable to get a response from the AI service. Please try again later.\",\n          { originalError: clientError }\n        );\n      }\n    }\n  }\n}\n\n/**\n * Handles standard non-streaming request\n * @param {string} message - User message\n * @param {Array<{role: string, content: string}>} history - Conversation history\n * @param {QueryIntent} queryIntent - Query intent analysis\n * @param {number} startTime - Request start timestamp\n * @returns {Promise<{content: string, metadata: object}>} The AI response\n */\nasync function handleStandardRequest(message, history, queryIntent, startTime) {\n  let data;\n  \n  try {\n    // First try to use the backend proxy endpoint with explicit content type\n    const response = await fetch(\"/api/chat\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n      },\n      body: JSON.stringify({ \n        message: message,\n        conversationHistory: history,\n        isHighRisk: queryIntent.isHighRisk || queryIntent.isMentalHealthCrisis,\n        metadata: {\n          queryIntent: extractQueryIntentMetadata(queryIntent)\n        }\n      }),\n      credentials: \"include\"\n    });\n    \n    // Validate proper response\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(\"Chat API error:\", errorText);\n      throw new Error(`API error: ${response.status} ${response.statusText}`);\n    }\n    \n    // Check for HTML response by looking at content-type\n    const contentType = response.headers.get(\"content-type\");\n    if (!contentType?.includes(\"application/json\")) {\n      console.error(\"Received non-JSON response:\", contentType);\n      const responseText = await response.text();\n      console.error(\"Response preview:\", responseText.substring(0, 200) + \"...\");\n      throw new Error(\"Server returned non-JSON data. The API route may be misconfigured.\");\n    }\n    \n    data = await response.json();\n    \n    // Validate the response format\n    if (!data || typeof data.response !== 'string') {\n      console.error(\"Invalid response format:\", data);\n      throw new Error(\"Invalid response format from API\");\n    }\n    \n    // Calculate request time\n    const requestTime = Date.now() - startTime;\n    \n    // Prepare response with metadata and appropriate disclaimers\n    const finalContent = addDisclaimers(data.response, queryIntent);\n    \n    // Create response with standardized metadata\n    return {\n      content: finalContent,\n      metadata: createResponseMetadata(requestTime, data, queryIntent)\n    };\n  } catch (error) {\n    console.error(\"Error in standard request:\", error);\n    throw error;\n  }\n}\n\n/**\n * Global AbortController instance for the current streaming request\n * This allows other components to cancel the stream\n * @type {AbortController|null}\n */\nlet streamAbortController = null;\n\n/**\n * Object to track message delivery state\n * @type {{messageDelivered: boolean}}\n */\nlet messageDeliveryState = { messageDelivered: false };\n\n/**\n * Stops the current streaming request if one is in progress\n * @returns {boolean} Whether a streaming request was stopped\n */\n/**\n * Stop the current streaming message generation\n * @param {boolean} [isDelivered=false] - Whether the message has already been delivered\n * @returns {boolean} Whether a streaming request was aborted\n */\nexport function stopStreaming(isDelivered = false) {\n  if (streamAbortController) {\n    // Update our message delivery state\n    messageDeliveryState.messageDelivered = isDelivered;\n    \n    // If the message was already delivered, we'll use a custom abort reason\n    // This helps avoid triggering error messages in the error handler\n    streamAbortController.abort(isDelivered ? 'message_complete' : 'user_cancelled');\n    \n    console.debug(\"Streaming request manually aborted\", isDelivered ? \"(message already delivered)\" : \"\");\n    streamAbortController = null;\n    return true;\n  }\n  return false;\n}\n\n/**\n * Handles streaming request with real-time updates\n * @param {string} message - User message\n * @param {Array<{role: string, content: string}>} history - Conversation history\n * @param {QueryIntent} queryIntent - Query intent analysis\n * @param {Function} onStreamingUpdate - Callback for streaming updates\n * @param {number} startTime - Request start timestamp\n * @param {AbortSignal} [signal] - Optional abort signal to cancel the request\n * @returns {Promise<{content: string, metadata: object}>} The final AI response\n */\nasync function handleStreamingRequest(message, history, queryIntent, onStreamingUpdate, startTime, signal) {\n  // First apply any disclaimers to the beginning of the response\n   \n  let _fullContent = '';\n  let accumulatedText = '';\n  const disclaimer = queryIntent.disclaimer || '';\n  let metadata = {};\n  \n  // Track completion status to prevent redundant error states\n  let messageDelivered = false;\n  let errorTimeout = null;\n  \n  if (disclaimer) {\n    // eslint-disable-next-line no-unused-vars\n    _fullContent = disclaimer + '\\n\\n';\n    accumulatedText = disclaimer + '\\n\\n';\n    onStreamingUpdate(accumulatedText, { isStreaming: true, isComplete: false });\n  }\n  \n  try {\n    // Create a new AbortController for this request\n    // This makes the controller globally available for stopStreaming()\n    streamAbortController = new GlobalAbortController();\n    \n    // Use the provided signal or the one from our controller\n    const abortSignal = signal || streamAbortController.signal;\n    \n    // Set an error timeout to handle real connection issues\n    // This will be cleared if 'done' event is received\n    errorTimeout = window.setTimeout(() => {\n      // Only trigger error if message hasn't been delivered yet\n      if (!messageDelivered) {\n        console.debug(\"Stream timeout - no complete response received within timeout period\");\n        // Only abort if not already aborted\n        if (streamAbortController && !abortSignal.aborted) {\n          streamAbortController.abort('timeout');\n        }\n      }\n    }, 30000); // 30 second timeout for streaming responses\n    \n    // Set up abort handling for when the request is canceled\n    const onAbort = () => {\n      console.debug(\"AI stream request aborted\");\n      // Mark the response as stopped (but not failed)\n      onStreamingUpdate(accumulatedText || \"AI response cancelled by user.\", { \n        isStreaming: false, \n        isComplete: true,\n        isCancelled: true,\n        status: 'cancelled',\n        cancelledByUser: true,\n        error: false, // Explicitly set error to false to prevent error handling\n        reason: 'user_cancelled'\n      });\n      \n      // Return from the function early to prevent further processing\n      return true;\n    };\n    \n    // Listen for abort events\n    abortSignal.addEventListener('abort', onAbort);\n    \n    // Connect to streaming endpoint with explicit headers and abort signal\n    const response = await fetch(\"/api/chat/stream\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"text/event-stream\",\n      },\n      body: JSON.stringify({\n        message: message,\n        conversationHistory: history,\n        isHighRisk: queryIntent.isHighRisk || queryIntent.isMentalHealthCrisis,\n        stream: true,\n        metadata: {\n          queryIntent: extractQueryIntentMetadata(queryIntent)\n        }\n      }),\n      credentials: \"include\",\n      signal: abortSignal // Add the abort signal\n    });\n    \n    // Validate proper response\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(\"Streaming API error:\", errorText);\n      throw new Error(`API error: ${response.status} ${response.statusText}`);\n    }\n    \n    // Check for HTML response by looking at content-type\n    const contentType = response.headers.get(\"content-type\");\n    if (contentType && contentType.includes(\"text/html\")) {\n      console.error(\"Received HTML instead of streaming data:\", contentType);\n      throw new Error(\"Server returned HTML instead of streaming data. The API route may be misconfigured.\");\n    }\n    \n    // Handle the streaming response\n    const reader = response.body.getReader();\n    const decoder = new window.TextDecoder();\n    \n    // Initialize the SSE processing state\n    let currentEvent = null;\n    let buffer = '';\n    \n    // Process SSE chunks correctly\n    while (true) {\n      const { done, value } = await reader.read();\n      if (done) {\n        console.log(\"Stream reading complete\");\n        break;\n      }\n      \n      // Decode chunk\n      const chunk = decoder.decode(value, { stream: true });\n      buffer += chunk;\n      \n      // Process complete lines in the buffer\n      const lines = buffer.split('\\n');\n      buffer = lines.pop() || ''; // Keep the last possibly incomplete line\n      \n      for (const line of lines) {\n        const trimmedLine = line.trim();\n        \n        // Skip empty lines and comments\n        if (!trimmedLine || trimmedLine.startsWith(':')) continue;\n        \n        // Event line\n        if (trimmedLine.startsWith('event:')) {\n          currentEvent = trimmedLine.substring(6).trim();\n          continue;\n        }\n        \n        // Data line\n        if (trimmedLine.startsWith('data:')) {\n          const jsonData = trimmedLine.substring(5).trim();\n          \n          try {\n            const data = JSON.parse(jsonData);\n            \n            // Process based on current event type\n            if (currentEvent === 'chunk' && data.text) {\n              // Accumulate text chunks\n              accumulatedText += data.text;\n              \n              // Update UI with current accumulated text\n              onStreamingUpdate(accumulatedText, { \n                isStreaming: true, \n                isComplete: false,\n                queryIntent: extractQueryIntentMetadata(queryIntent) \n              });\n            } else if (currentEvent === 'done') {\n              // Mark as delivered to prevent any error messages from showing up later\n              messageDelivered = true;\n              \n              // Capture metadata from the done event with explicit completion flag\n              metadata = { \n                ...metadata, \n                ...data,\n                isComplete: true, // Explicitly mark as complete to ensure proper status update\n                completed: true,\n                status: 'delivered', // Explicitly set status to delivered for UI handling\n                error: false       // Explicitly mark no error to prevent fallback error display\n              };\n              console.log(\"Stream completed with metadata:\", data);\n              console.debug(\"STREAM_END: Message streaming has ended, setting status to delivered\");\n              \n              // CRITICAL FIX: Prevent any pending error handlers from executing\n              if (errorTimeout) {\n                console.debug(\"STREAM_END: Clearing error timeout handler\");\n                safeClearTimeout(errorTimeout);\n                errorTimeout = null;\n              }\n              \n              // Immediately trigger a final update with the accumulated text\n              // This ensures the message is properly marked as complete\n              onStreamingUpdate(accumulatedText, { \n                isStreaming: false, \n                isComplete: true,\n                status: 'delivered', // Explicitly set status to delivered\n                error: false,        // Explicitly mark as no error to prevent error display\n                queryIntent: extractQueryIntentMetadata(queryIntent),\n                ...metadata\n              });\n              \n              // Double check to make sure the timeout is cleared\n              window.setTimeout(() => {\n                console.debug(\"Doing final check to ensure error timeouts are cleared\");\n                if (errorTimeout) {\n                  safeClearTimeout(errorTimeout);\n                  errorTimeout = null;\n                }\n              }, 0);\n            } else if (currentEvent === 'config') {\n              // Store session info from config\n              metadata = { ...metadata, ...data };\n              console.log(\"Received config:\", data);\n            } else if (currentEvent === 'error') {\n              console.error(\"Stream error:\", data.error);\n              throw new Error(data.error || \"Unknown streaming error\");\n            }\n          } catch (e) {\n            console.error(\"Error parsing SSE data:\", e, \"raw data:\", jsonData);\n          }\n        }\n      }\n    }\n    \n    // Clear the global abort controller since we're done with the fetch\n    if (streamAbortController) {\n      streamAbortController = null;\n    }\n    \n    // Final update with complete flag\n    const requestTime = Date.now() - startTime;\n    \n    // Check if the request was cancelled\n    const isCancelled = abortSignal && abortSignal.aborted;\n    \n    // Check if we have any accumulated text - sometimes the done event might arrive before any text\n    if (isCancelled && !accumulatedText) {\n      // If cancelled with no content, show cancellation message\n      accumulatedText = \"AI response cancelled.\";\n    } else if (!accumulatedText && disclaimer) {\n      // If we only have the disclaimer but no AI response, provide a fallback message\n      accumulatedText = disclaimer + \"\\n\\nI apologize, but I'm having trouble generating a response right now. Please try again in a moment.\";\n    } else if (!accumulatedText) {\n      // If no text at all, provide a simple error message\n      accumulatedText = \"I apologize, but I'm having trouble generating a response right now. Please try again in a moment.\";\n    }\n    \n    // Create final metadata\n    const finalMetadata = createResponseMetadata(requestTime, {\n      model: metadata.model || \"deepseek-chat\",\n      isStreaming: false,\n      requestTime: metadata.requestTime || requestTime,\n      tokensEstimate: metadata.tokensEstimate || 0,\n      completed: isCancelled ? false : (metadata.completed !== false), // Mark as incomplete if cancelled\n      isCancelled: isCancelled,\n      status: isCancelled ? 'stopped' : (metadata.error ? 'failed' : 'delivered')\n    }, queryIntent);\n    \n    // Only mark as complete if no explicit error was received and not cancelled\n    const isComplete = !isCancelled && metadata.error !== true;\n    \n    // Signal completion\n    onStreamingUpdate(accumulatedText, { \n      isStreaming: false, \n      isComplete: isComplete,\n      isCancelled: isCancelled,\n      status: isCancelled ? 'stopped' : (metadata.error ? 'failed' : 'delivered'),\n      ...finalMetadata\n    });\n    \n    // Return a properly formatted response object\n    const messageResponse = {\n      content: accumulatedText,\n      metadata: finalMetadata\n    };\n    return messageResponse;\n  } catch (error) {\n    // Clear the abort controller\n    if (streamAbortController) {\n      streamAbortController = null;\n    }\n    \n    // If message was already successfully delivered (done event received),\n    // don't show error message to the user\n    if (messageDelivered) {\n      console.log(\"Ignoring error after successful message delivery:\", error);\n      \n      // Create an error object with messageDelivered flag to prevent error display\n      // This allows higher-level handlers to avoid showing errors for delivered messages\n      const deliveredError = createAPIError(\n        \"none\", \n        \"Message already delivered\", \n        { \n          originalError: error,\n          messageDelivered: true,\n          deliveredContent: accumulatedText\n        }\n      );\n      \n      // Set the messageDelivered flag directly on the error object\n      deliveredError.messageDelivered = true;\n      deliveredError.deliveredContent = accumulatedText;\n      \n      throw deliveredError;\n    }\n    \n    // Check if this was a cancellation by the user or if the message was already delivered\n    const isCancelled = signal && signal.aborted;\n    const wasDelivered = messageDeliveryState.messageDelivered === true;\n    \n    // If the message was already delivered, we should preserve that state\n    // and not show any error or cancellation UI\n    if (wasDelivered) {\n      console.debug(\"Ignoring abort for message that was already delivered\");\n      \n      // Use the existing content (no changes)\n      onStreamingUpdate(accumulatedText, { \n        isStreaming: false, \n        isComplete: true,\n        isCancelled: false,\n        status: 'delivered',\n        error: false\n      });\n      \n      // Return with success status rather than error\n      /** @type {MessageResponse} */\n      const successResponse = {\n        content: accumulatedText,\n        metadata: {\n          status: 'delivered',\n          error: false,\n          isComplete: true\n        },\n        isCancelled: false\n      };\n    }\n    else if (isCancelled) {\n      console.debug(\"Stream was cancelled by user - not treating as error\");\n      \n      // Handle cancellation gracefully\n      onStreamingUpdate(accumulatedText || \"AI response cancelled by user.\", { \n        isStreaming: false, \n        isComplete: true,\n        isCancelled: true,\n        status: 'cancelled',\n        cancelledByUser: true,\n        error: false,\n        reason: 'user_cancelled'\n      });\n      \n      // Return a clean result instead of throwing an error\n      const cancelledResponse = {\n        content: accumulatedText || \"AI response cancelled by user.\",\n        metadata: {\n          isCancelled: true,\n          cancelledByUser: true,\n          status: 'cancelled',\n          cancelled: true\n        }\n      };\n      return cancelledResponse;\n    } else if (errorTimeout) {\n      // Clear any pending error timeout since we're handling the error now\n      safeClearTimeout(errorTimeout);\n      errorTimeout = null;\n      \n      // Check if this was a timeout abort\n      const isTimeout = error.name === 'AbortError' && \n                        signal.reason === 'timeout';\n                        \n      if (isTimeout) {\n        console.error(\"Stream timed out - no response received within timeout period\");\n        \n        // Handle timeout differently from other errors\n        onStreamingUpdate(accumulatedText || \"I apologize, but the response is taking longer than expected. Please try again.\", {\n          isStreaming: false,\n          isComplete: true,\n          status: 'failed',\n          error: true,\n          errorType: 'timeout'\n        });\n        \n        throw createAPIError(\n          \"timeout\", \n          \"The AI service took too long to respond. Please try again.\", \n          { originalError: error }\n        );\n      }\n      \n      // This is a genuine error, not a user cancellation or timeout\n      console.error(\"Streaming error:\", error);\n      \n      // Before throwing error, make sure we set the complete flag to stop any pending animation\n      // This ensures the UI won't remain in a pending state if there's an error\n      onStreamingUpdate(accumulatedText || \"I'm sorry, an error occurred while generating the response.\", { \n        isStreaming: false, \n        isComplete: true,\n        isError: true,\n        error: error.message,\n        errorType: 'streaming_error',\n        status: 'failed'\n      });\n      \n      throw error; // Let the main function handle retries\n    }\n  }\n}\n\n/**\n * Retry API request with exponential backoff\n * @param {string} endpoint - API endpoint\n * @param {string} message - User message\n * @param {Array<Message>} history - Conversation history\n * @param {boolean} isHighRisk - Whether the message contains high-risk terms\n * @param {QueryIntent} [queryIntent] - Query intent analysis results\n * @returns {Promise<APIResponse>} API response with metadata\n * @throws {APIErrorDetails} Standardized error if all retries fail\n */\nexport async function retryApiRequest(endpoint, message, history, isHighRisk, queryIntent = null) {\n  const config = getDeepSeekConfig();\n\n  // Use withExponentialBackoff helper to manage retries\n  return await withExponentialBackoff(\n    async (attempt) => {\n      // Start timing the request\n      const startTime = Date.now();\n      \n      // Include query intent data if available\n      const requestBody = { \n        message,\n        conversationHistory: history,\n        isHighRisk,\n        // Add query intent metadata if available\n        ...(queryIntent && { \n          metadata: {\n            queryIntent: extractQueryIntentMetadata(queryIntent),\n            attemptCount: attempt + 1\n          }\n        })\n      };\n      \n      const response = await apiRequest(\"POST\", endpoint, requestBody);\n      \n      const data = await response.json();\n      \n      // Calculate request time\n      const requestTime = Date.now() - startTime;\n      \n      // Add disclaimers based on query intent\n      const finalContent = addDisclaimers(data.response, queryIntent);\n      \n      // Create standardized response metadata with attempt count\n      const metadata = createResponseMetadata(requestTime, data, queryIntent, { \n        attemptCount: attempt + 1\n      });\n      \n      // Return standardized response\n      return { content: finalContent, metadata };\n    },\n    // Configuration for exponential backoff\n    config.maxRetries,\n    config.retryDelay,\n    // Callback to log retry attempts\n    (error, attempt, delay) => {\n      console.error(`API retry attempt ${attempt + 1}/${config.maxRetries} failed:`, error);\n      console.info(`Retrying in ${Math.round(delay/100)/10}s...`);\n    }\n  );\n}\n\n/**\n * Sends a message to the LLM API directly from the client side\n * Used as a fallback if the backend proxy is unavailable\n * @param {string} message - The user message to send\n * @param {Array<Message>} [history=[]] - Previous conversation history\n * @param {QueryIntent} [queryIntent=null] - Query intent analysis results with safety information\n * @returns {Promise<APIResponse>} The AI response with metadata\n * @throws {APIErrorDetails} Standardized error object if request fails\n */\nexport async function sendMessageClientSide(message, history = [], queryIntent = null) {\n  const config = getDeepSeekConfig();\n  \n  // Default isHighRisk if no query intent\n  const isHighRisk = queryIntent ? (queryIntent.isHighRisk || queryIntent.isMentalHealthCrisis) : false;\n  \n  if (!config.apiKey) {\n    throw createAPIError(\n      \"configuration\", \n      \"DeepSeek API key is missing. Please set the DEEPSEEK_API_KEY environment variable.\"\n    );\n  }\n\n  // Create customized prompt based on query intent if available\n  const customPrompt = queryIntent ? createCustomPrompt(queryIntent) : '';\n  \n  // Prepare messages with custom prompt if available\n  const messages = prepareMessages(message, history, true, customPrompt);\n  \n  // Use withExponentialBackoff helper for client-side retries\n  return await withExponentialBackoff(\n    async (attempt) => {\n      // Start timing the request\n      const startTime = Date.now();\n      \n      const response = await fetch(config.endpoint, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${config.apiKey}`,\n        },\n        body: JSON.stringify({\n          model: config.model,\n          messages: messages,\n          temperature: config.temperature,\n          max_tokens: config.maxTokens,\n        }),\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw createAPIError(\n          \"api\", \n          `DeepSeek API error (${response.status}): ${errorText}`,\n          { status: response.status }\n        );\n      }\n\n      const data = await response.json();\n      const rawContent = data.choices[0]?.message?.content || \n        \"I apologize, but I couldn't generate a response. Please try again later.\";\n      \n      // Calculate request time\n      const requestTime = Date.now() - startTime;\n    \n      // Add appropriate disclaimers using helper function\n      const finalContent = addDisclaimers(rawContent, queryIntent, isHighRisk);\n      \n      // Create standardized response metadata using helper function\n      const metadata = createResponseMetadata(\n        requestTime, \n        data, \n        queryIntent, \n        { \n          clientSide: true,\n          attemptCount: attempt + 1,\n          modelName: data.model || config.model\n        }\n      );\n      \n      // Return standardized response format\n      return { content: finalContent, metadata };\n    },\n    // Use client-side retry configuration with fewer retries\n    Math.min(config.maxRetries, 2), // Limit client-side retries\n    config.retryDelay,\n    // Log retry attempts\n    (error, attempt, delay) => {\n      console.error(`Client-side API retry attempt ${attempt + 1}/2 failed:`, error);\n      console.info(`Retrying direct API call in ${Math.round(delay/100)/10}s...`);\n    }\n  ).catch(error => {\n    // Handle network errors separately from API errors using our type guards\n    if (isAPIError(error)) {\n      // If it's already our standardized error, just re-throw it\n      throw error;\n    } else if (isAbortError(error)) {\n      throw createAPIError(\"timeout\", \"Request timed out\", { originalError: error });\n    } else if (isError(error) && error.message && error.message.includes('NetworkError')) {\n      throw createAPIError(\"network\", \"Network error, please check your internet connection\", { originalError: error });\n    } else {\n      // Handle any error type safely\n      const errorMessage = isError(error) && error.message ? \n                          error.message : \"Unknown error occurred\";\n      throw createAPIError(\"unknown\", errorMessage, { originalError: error });\n    }\n  });\n}","usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/lib/path-resolver.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/lib/queryClient.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/lib/supabase.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/lib/types.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/lib/ui-utils.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/lib/utils.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/lib/utils/logger.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/lib/utils/message-logger.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/main.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/pages/ChatPage.jsx","messages":[],"suppressedMessages":[{"ruleId":"no-unused-vars","severity":2,"message":"'ThemeToggle' is defined but never used. Allowed unused vars must match /React|Switch|Route|Redirect|Router|QueryClientProvider|AuthProvider|ProtectedRoute|ChatPage|ChevronRight|MoreHorizontal|ChevronDown|ChevronUp|Search|CheckIcon|ChevronsUpDown|Circle|X|Plus|Minus|Slot|Check|Button|Input|MessageBubble|SocialLoginButton|FcGoogle|FaMicrosoft|FaApple|OTPInput|OTPInputContext|Dot|Dialog|DialogContent|Label|LabelPrimitive|Controller|DayPicker|ChevronLeft|ArrowLeft|ArrowRight|Link|GripVertical|PanelLeft|Separator|Sheet|SheetContent|SheetDescription|SheetHeader|SheetTitle|SheetTrigger|Toast|ToastClose|ToastDescription|ToastProvider|ToastTitle|ToastViewport|App|Skeleton|Tooltip|TooltipContent|TooltipProvider|TooltipTrigger|Comp/u.","line":8,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"ThemeToggle"},"fix":{"range":[357,413],"text":""},"desc":"Remove unused variable 'ThemeToggle'."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/pages/LoginPage.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/workspace/client/src/pages/not-found.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
